import StackFrame from './stack_frame';
var StackFrameStats = /** @class */ (function () {
    function StackFrameStats(
    // This stack frame's unique ID
    id, 
    // The LeakRoots that reference this stack frame
    leaks, 
    // The number of stacks that reference this stack frame
    count) {
        this.id = id;
        this.leaks = leaks;
        this.count = count;
    }
    return StackFrameStats;
}());
/**
 * Stores a set of stack traces associated with specific memory leaks.
 *
 * Supports:
 * - Looking up the leaks associated with a given source location
 * - Returning all of the stack frames located in a specific file
 * - Returning the stack traces associated with a specific leak
 */
var StackTraceManager = /** @class */ (function () {
    function StackTraceManager(sfm, frames, _leaks) {
        var _this = this;
        this._leaks = _leaks;
        this._fileStackFrames = new Map();
        this._locationToId = new Map();
        this._frames = frames.map(function (f) { return new StackFrame(sfm.getSourceFile(f[0]), f[3], f[1], f[2]); });
        this._frameStats = this._frames.map(function (f, id) { return new StackFrameStats(id, [], 0); });
        this._leaks.forEach(function (l) {
            l.stacks.forEach(function (s) {
                for (var _i = 0, s_1 = s; _i < s_1.length; _i++) {
                    var sf = s_1[_i];
                    var stats = _this._frameStats[sf];
                    stats.count++;
                    if (stats.leaks.indexOf(l) === -1) {
                        stats.leaks.push(l);
                    }
                    var sfObj = _this._frames[sf];
                    var fileStackFrames = _this._fileStackFrames.get(sfObj.file);
                    if (!fileStackFrames) {
                        fileStackFrames = [];
                        _this._fileStackFrames.set(sfObj.file, fileStackFrames);
                    }
                    // TODO: Could use a set, but these arrays are expected to be small.
                    if (fileStackFrames.indexOf(sf) === -1) {
                        fileStackFrames.push(sf);
                    }
                    _this._locationToId.set(sfObj.key, sf);
                }
            });
        });
    }
    StackTraceManager.FromBLeakResults = function (sourceFileManager, results) {
        return new StackTraceManager(sourceFileManager, results.stackFrames, results.leaks);
    };
    StackTraceManager.prototype._getFrameForLocation = function (location) {
        return this._locationToId.get(location.key);
    };
    StackTraceManager.prototype.getLeaksForLocation = function (location) {
        var sfId = this._getFrameForLocation(location.getOriginalLocation());
        return this._frameStats[sfId].leaks;
    };
    StackTraceManager.prototype.getFramesForFile = function (file) {
        var _this = this;
        var fileInfo = this._fileStackFrames.get(file);
        if (!fileInfo) {
            return [];
        }
        // Filter out locations at invalid locations (0, -1, etc).
        return fileInfo.map(function (sf) { return _this._frames[sf]; }).filter(function (sf) { return sf.line > 0 && sf.column > 0; });
    };
    StackTraceManager.prototype.getTracesForLeak = function (l) {
        var _this = this;
        return l.stacks.map(function (s) { return s.map(function (sf) { return _this._frames[sf]; }); });
    };
    StackTraceManager.prototype.stackToFrames = function (s) {
        var _this = this;
        return s.map(function (s) { return _this._frames[s]; });
    };
    return StackTraceManager;
}());
export default StackTraceManager;
//# sourceMappingURL=data:application/json;base64,