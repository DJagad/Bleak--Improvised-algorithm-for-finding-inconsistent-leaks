import * as tslib_1 from "tslib";
import * as React from 'react';
import LeakRootList from './leak_root_list';
var LeakRootsAndStackTracesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LeakRootsAndStackTracesComponent, _super);
    function LeakRootsAndStackTracesComponent(props, c) {
        var _this = _super.call(this, props, c) || this;
        _this.state = {
            rankBy: "leakShare"
        };
        return _this;
    }
    LeakRootsAndStackTracesComponent.prototype.render = function () {
        var _this = this;
        return React.createElement("div", null,
            React.createElement("div", { className: "form-group row" },
                React.createElement("label", { "data-for": "staticEmail", className: "col-sm-2 col-form-label" }, "Rank By"),
                React.createElement("div", { className: "col-sm-10" },
                    React.createElement("select", { className: "form-control", onChange: function (e) { _this.setState({ rankBy: e.target.options[e.target.options.selectedIndex].value }); } },
                        React.createElement("option", { value: "leakShare" }, "LeakShare"),
                        React.createElement("option", { value: "transitiveClosureSize" }, "Transitive Closure Size"),
                        React.createElement("option", { value: "retainedSize" }, "Retained Size"),
                        React.createElement("option", { value: "ownedObjects" }, "Uniquely Owned Objects")))),
            React.createElement(LeakRootList, { stackTraces: this.props.stackTraces, selectedLocation: this.props.selectedLocation, bleakResults: this.props.bleakResults, onStackFrameSelect: this.props.onStackFrameSelect, rankBy: this.state.rankBy }));
    };
    return LeakRootsAndStackTracesComponent;
}(React.Component));
export default LeakRootsAndStackTracesComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVha19yb290c19hbmRfc3RhY2tfdHJhY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3ZpZXdlci9jb21wb25lbnRzL2xlYWtfcm9vdHNfYW5kX3N0YWNrX3RyYWNlcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRS9CLE9BQU8sWUFBWSxNQUFNLGtCQUFrQixDQUFDO0FBZ0I1QztJQUE4RCw0REFBNkY7SUFDekosMENBQVksS0FBNEMsRUFBRSxDQUFPO1FBQWpFLFlBQ0Usa0JBQU0sS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUloQjtRQUhDLEtBQUksQ0FBQyxLQUFLLEdBQUc7WUFDWCxNQUFNLEVBQUUsV0FBVztTQUNwQixDQUFDOztJQUNKLENBQUM7SUFFTSxpREFBTSxHQUFiO1FBQUEsaUJBZUM7UUFkQyxNQUFNLENBQUM7WUFDTCw2QkFBSyxTQUFTLEVBQUMsZ0JBQWdCO2dCQUM3QiwyQ0FBZ0IsYUFBYSxFQUFDLFNBQVMsRUFBQyx5QkFBeUIsY0FBZ0I7Z0JBQ2pGLDZCQUFLLFNBQVMsRUFBQyxXQUFXO29CQUN4QixnQ0FBUSxTQUFTLEVBQUMsY0FBYyxFQUFDLFFBQVEsRUFBRSxVQUFDLENBQUMsSUFBTyxLQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQW9CLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQzt3QkFDcEosZ0NBQVEsS0FBSyxFQUFDLFdBQVcsZ0JBQW1CO3dCQUM1QyxnQ0FBUSxLQUFLLEVBQUMsdUJBQXVCLDhCQUFpQzt3QkFDdEUsZ0NBQVEsS0FBSyxFQUFDLGNBQWMsb0JBQXVCO3dCQUNuRCxnQ0FBUSxLQUFLLEVBQUMsY0FBYyw2QkFBZ0MsQ0FDckQsQ0FDTCxDQUNGO1lBQ04sb0JBQUMsWUFBWSxJQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBSSxDQUNyTixDQUFDO0lBQ1QsQ0FBQztJQUNILHVDQUFDO0FBQUQsQ0FBQyxBQXhCRCxDQUE4RCxLQUFLLENBQUMsU0FBUyxHQXdCNUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQkxlYWtSZXN1bHRzIGZyb20gJy4uLy4uL2xpYi9ibGVha19yZXN1bHRzJztcbmltcG9ydCBMZWFrUm9vdExpc3QgZnJvbSAnLi9sZWFrX3Jvb3RfbGlzdCc7XG5pbXBvcnQgTG9jYXRpb24gZnJvbSAnLi4vbW9kZWwvbG9jYXRpb24nO1xuaW1wb3J0IFN0YWNrRnJhbWUgZnJvbSAnLi4vbW9kZWwvc3RhY2tfZnJhbWUnO1xuaW1wb3J0IFN0YWNrVHJhY2VNYW5hZ2VyIGZyb20gJy4uL21vZGVsL3N0YWNrX3RyYWNlX21hbmFnZXInO1xuXG5pbnRlcmZhY2UgTGVha1Jvb3RzQW5kU3RhY2tUcmFjZXNDb21wb25lbnRQcm9wcyB7XG4gIGJsZWFrUmVzdWx0czogQkxlYWtSZXN1bHRzO1xuICBvblN0YWNrRnJhbWVTZWxlY3Q6IChzZjogU3RhY2tGcmFtZSkgPT4gdm9pZDtcbiAgc2VsZWN0ZWRMb2NhdGlvbjogTG9jYXRpb247XG4gIHN0YWNrVHJhY2VzOiBTdGFja1RyYWNlTWFuYWdlcjtcbn1cblxuaW50ZXJmYWNlIExlYWtSb290c0FuZFN0YWNrVHJhY2VzQ29tcG9uZW50U3RhdGUge1xuICByYW5rQnk6IFwidHJhbnNpdGl2ZUNsb3N1cmVTaXplXCIgfCBcImxlYWtTaGFyZVwiIHwgXCJyZXRhaW5lZFNpemVcIiB8IFwib3duZWRPYmplY3RzXCI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExlYWtSb290c0FuZFN0YWNrVHJhY2VzQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PExlYWtSb290c0FuZFN0YWNrVHJhY2VzQ29tcG9uZW50UHJvcHMsIExlYWtSb290c0FuZFN0YWNrVHJhY2VzQ29tcG9uZW50U3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IExlYWtSb290c0FuZFN0YWNrVHJhY2VzQ29tcG9uZW50UHJvcHMsIGM/OiBhbnkpIHtcbiAgICBzdXBlcihwcm9wcywgYyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHJhbmtCeTogXCJsZWFrU2hhcmVcIlxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgICA8bGFiZWwgZGF0YS1mb3I9XCJzdGF0aWNFbWFpbFwiIGNsYXNzTmFtZT1cImNvbC1zbS0yIGNvbC1mb3JtLWxhYmVsXCI+UmFuayBCeTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBvbkNoYW5nZT17KGUpID0+IHsgdGhpcy5zZXRTdGF0ZSh7IHJhbmtCeTogZS50YXJnZXQub3B0aW9uc1tlLnRhcmdldC5vcHRpb25zLnNlbGVjdGVkSW5kZXhdLnZhbHVlIGFzIFwibGVha1NoYXJlXCIgfSkgfX0+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibGVha1NoYXJlXCI+TGVha1NoYXJlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwidHJhbnNpdGl2ZUNsb3N1cmVTaXplXCI+VHJhbnNpdGl2ZSBDbG9zdXJlIFNpemU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZXRhaW5lZFNpemVcIj5SZXRhaW5lZCBTaXplPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwib3duZWRPYmplY3RzXCI+VW5pcXVlbHkgT3duZWQgT2JqZWN0czwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPExlYWtSb290TGlzdCBzdGFja1RyYWNlcz17dGhpcy5wcm9wcy5zdGFja1RyYWNlc30gc2VsZWN0ZWRMb2NhdGlvbj17dGhpcy5wcm9wcy5zZWxlY3RlZExvY2F0aW9ufSBibGVha1Jlc3VsdHM9e3RoaXMucHJvcHMuYmxlYWtSZXN1bHRzfSBvblN0YWNrRnJhbWVTZWxlY3Q9e3RoaXMucHJvcHMub25TdGFja0ZyYW1lU2VsZWN0fSByYW5rQnk9e3RoaXMuc3RhdGUucmFua0J5fSAvPlxuICAgIDwvZGl2PjtcbiAgfVxufSJdfQ==