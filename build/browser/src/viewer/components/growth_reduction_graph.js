import * as tslib_1 from "tslib";
import * as React from 'react';
import { scaleLinear as d3ScaleLinear, line as d3Line, select as d3Select, axisBottom, axisLeft, mean, deviation, max, zip as d3Zip, range as d3Range, min } from 'd3';
var BYTES_PER_MB = 1024 * 1024;
function countNonNull(count, a) {
    if (Array.isArray(a)) {
        var aCount = a.reduce(countNonNull, 0);
        if (aCount !== a.length) {
            return count;
        }
        else {
            return count + 1;
        }
    }
    if (a) {
        return count + 1;
    }
    else {
        return count;
    }
}
export function isRankingEvaluationComplete(results) {
    var numLeaks = results.rankingEvaluation.leakShare.length;
    try {
        var zeroLeaksFixed = results.rankingEvaluation.leakShare[0];
        var allLeaksFixed = results.rankingEvaluation.leakShare[numLeaks - 1];
        // Make sure all of the data is there!
        if (!zeroLeaksFixed || !allLeaksFixed || zeroLeaksFixed.reduce(countNonNull, 0) < zeroLeaksFixed.length || allLeaksFixed.reduce(countNonNull, 0) < allLeaksFixed.length) {
            return false;
        }
        return true;
    }
    catch (e) {
        return false;
    }
}
export function averageGrowth(data) {
    // HS => Growth
    var growthData = data.map(function (d, i) { return d.slice(1).map(function (d, j) { return (d.totalSize - data[i][j].totalSize) / BYTES_PER_MB; }); });
    // Growth => Avg Growth
    var avgGrowths = [];
    var iterations = data[0].length;
    var _loop_1 = function (i) {
        avgGrowths.push(mean(growthData.map(function (d) { return d[i]; })));
    };
    for (var i = 0; i < iterations; i++) {
        _loop_1(i);
    }
    var se = deviation(avgGrowths.slice(4)) / Math.sqrt(avgGrowths.length - 4);
    var meanData = mean(avgGrowths.slice(4));
    if (isNaN(se)) {
        return {
            mean: meanData
        };
    }
    return {
        mean: meanData,
        se: se
    };
}
export function averageGrowthReduction(avgGrowthNoFixed, allFixed) {
    var avgGrowthAllFixed = averageGrowth(allFixed);
    var growthReduction = avgGrowthNoFixed.mean - avgGrowthAllFixed.mean;
    var percent = 100 * (growthReduction / avgGrowthNoFixed.mean);
    if (avgGrowthNoFixed.se !== undefined) {
        var growthReductionSe = Math.sqrt(Math.pow(avgGrowthAllFixed.se, 2) + Math.pow(avgGrowthNoFixed.se, 2));
        var percentSe = 100 * Math.abs((avgGrowthNoFixed.mean - avgGrowthAllFixed.mean) / avgGrowthNoFixed.mean) * Math.sqrt(Math.pow(growthReductionSe / growthReduction, 2) + Math.pow(avgGrowthNoFixed.se / avgGrowthNoFixed.mean, 2));
        return {
            mean: growthReduction,
            se: growthReductionSe,
            percent: percent,
            percentSe: percentSe
        };
    }
    else {
        return {
            mean: growthReduction,
            percent: percent
        };
    }
}
// TODO: Support toggling different size stats, not just totalSize.
var GrowthReductionGraph = /** @class */ (function (_super) {
    tslib_1.__extends(GrowthReductionGraph, _super);
    function GrowthReductionGraph() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._resizeListener = _this._updateGraph.bind(_this);
        return _this;
    }
    GrowthReductionGraph.prototype.componentDidMount = function () {
        this._updateGraph();
        window.addEventListener('resize', this._resizeListener);
    };
    GrowthReductionGraph.prototype.componentDidUpdate = function () {
        this._updateGraph();
    };
    GrowthReductionGraph.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this._resizeListener);
    };
    GrowthReductionGraph.prototype._updateGraph = function () {
        if (!this._hasHeapStats()) {
            return;
        }
        var d3div = this.refs['d3_div'];
        if (d3div.childNodes && d3div.childNodes.length > 0) {
            var nodes = [];
            for (var i = 0; i < d3div.childNodes.length; i++) {
                nodes.push(d3div.childNodes[i]);
            }
            nodes.forEach(function (n) { return d3div.removeChild(n); });
        }
        var svg = d3Select(d3div).append("svg");
        var svgStyle = getComputedStyle(svg.node());
        var margins = { left: 65, right: 20, top: 10, bottom: 35 };
        var svgHeight = parseFloat(svgStyle.height);
        var svgWidth = parseFloat(svgStyle.width);
        var radius = 3;
        var tickSize = 6;
        var rankings = ['leakShare', 'retainedSize', 'transitiveClosureSize'];
        var rankEval = this.props.bleakResults.rankingEvaluation;
        // Check if zero point is same or different across rankings.
        // Hack for legacy airbnb data, which has different data for the "no
        // fixes" run across the three metrics (which we leverage to give us
        // tighter error bars on that number / repro the numbers in the paper).
        //
        // On all data produced by BLeak moving forward, the data for the "no fixes"
        // run is the same / shared across metrics -- so we just use the data reported
        // for one metric as the base case.
        var zeroPointData = rankEval.leakShare[0];
        if (zeroPointData[0][0].totalSize !== rankEval.retainedSize[0][0][0].totalSize) {
            // Different data, so can use.
            zeroPointData = [].concat(rankEval.leakShare[0], rankEval.retainedSize[0], rankEval.transitiveClosureSize[0]);
        }
        var zeroPoint = averageGrowth(zeroPointData);
        var state = {
            leakShare: null,
            retainedSize: null,
            transitiveClosureSize: null
        };
        var lines = rankings.map(function (ranking) {
            var line = {
                name: ranking,
                value: rankEval[ranking].map(function (d) { return (zeroPoint.mean - averageGrowth(d).mean) * 1024; })
            };
            if (rankEval[ranking][0].length > 1) {
                line.se = rankEval[ranking].map(function (d) { return (Math.sqrt(Math.pow(zeroPoint.se, 2) + Math.pow(averageGrowth(d).se, 2)) * 1024); });
            }
            return line;
        });
        rankings.forEach(function (ranking) {
            state[ranking] = rankEval[ranking].map(function (d) { return zeroPoint.mean - averageGrowth(d).mean * 1024; });
        });
        var maxHeapSize = 1.02 * max(lines.map(function (l) { return max(l.value.map(function (v, i) { return v + (l.se ? (1.96 * l.se[i]) : 0); })); }));
        var minHeapSize = 0.98 * min(lines.map(function (l) { return min(l.value.map(function (v, i) { return v - (l.se ? (1.96 * l.se[i]) : 0); })); }));
        var plotWidth = svgWidth - margins.left - margins.right;
        var plotHeight = svgHeight - margins.top - margins.bottom;
        var x = d3ScaleLinear()
            .range([0, plotWidth])
            .domain([0, lines[0].value.length - 1]);
        var y = d3ScaleLinear().range([plotHeight, 0])
            .domain([minHeapSize, maxHeapSize]);
        var valueline = d3Line()
            .x(function (d) { return x(d[0]); })
            .y(function (d) { return y(d[1]); });
        var data = lines.map(function (l) {
            return d3Zip(d3Range(0, l.value.length), l.value, l.se ? l.se : d3Range(0, l.value.length));
        });
        var g = svg.append("g").attr('transform', "translate(" + margins.left + ", " + margins.top + ")");
        var plots = g.selectAll("g.plot")
            .data(data)
            .enter()
            .append('g')
            .attr('class', function (d, i) { return "plot plot_" + i; });
        var hasError = !!lines[0].se;
        var self = this;
        function drawPointsAndErrorBars(d, i) {
            // Prevent overlapping points / bars
            var move = i * 5;
            var g = d3Select(this)
                .selectAll('circle')
                .data(d)
                .enter()
                .append('g')
                .attr('class', 'data-point')
                .attr('data-placement', 'left')
                .attr('title', function (d) { return lines[i].name + " " + d[0] + " Leaks Fixed: " + self._presentStat(d[1], 'KB', hasError ? d[2] : undefined); })
                .each(function (_, __, g) {
                for (var i_1 = 0; i_1 < g.length; i_1++) {
                    $(g[i_1]).tooltip();
                }
            });
            g.append('circle')
                .attr('r', radius)
                .attr('cx', function (d) { return x(d[0]) + move; })
                .attr('cy', function (d) { return y(d[1]); });
            if (hasError) {
                // Straight line
                g.append("line")
                    .attr("class", "error-line")
                    .attr("x1", function (d) {
                    return x(d[0]) + move;
                })
                    .attr("y1", function (d) {
                    return y(d[1] + (1.96 * d[2]));
                })
                    .attr("x2", function (d) {
                    return x(d[0]) + move;
                })
                    .attr("y2", function (d) {
                    return y(d[1] - (1.96 * d[2]));
                });
                // Top cap
                g.append("line")
                    .attr("class", "error-cap")
                    .attr("x1", function (d) {
                    return x(d[0]) - 4 + move;
                })
                    .attr("y1", function (d) {
                    return y(d[1] + (1.96 * d[2]));
                })
                    .attr("x2", function (d) {
                    return x(d[0]) + 4 + move;
                })
                    .attr("y2", function (d) {
                    return y(d[1] + (1.96 * d[2]));
                });
                // Bottom cap
                g.append("line")
                    .attr("class", "error-cap")
                    .attr("x1", function (d) {
                    return x(d[0]) - 4 + move;
                })
                    .attr("y1", function (d) {
                    return y(d[1] - (1.96 * d[2]));
                })
                    .attr("x2", function (d) {
                    return x(d[0]) + 4 + move;
                })
                    .attr("y2", function (d) {
                    return y(d[1] - (1.96 * d[2]));
                });
            }
        }
        plots.append('path')
            .attr("class", 'line')
            .attr("d", valueline);
        plots.each(drawPointsAndErrorBars);
        // Add the X Axis
        g.append("g")
            .attr('class', 'xaxis')
            .attr("transform", "translate(0," + plotHeight + ")")
            .call(axisBottom(x).tickSizeOuter(tickSize).tickFormat(function (n) {
            var val = typeof (n) === 'number' ? n : n.valueOf();
            if (Math.floor(val) !== val) {
                // Drop the tick mark.
                return undefined;
            }
            return n;
        }));
        // Add the Y Axis
        g.append("g")
            .attr('class', 'yaxis')
            .call(axisLeft(y).tickSizeOuter(tickSize).tickFormat(function (n) { return n + " KB"; }));
        // Add X axis title
        g.append('text')
            .attr('class', 'xtitle')
            .attr('x', plotWidth >> 1)
            .attr('y', 32) // Approximate height of x axis
            .attr('transform', "translate(0, " + plotHeight + ")")
            .style('text-anchor', 'middle')
            .text('Top Ranked Leak Roots Fixed');
        // Add Y axis title
        g.append('text')
            .attr('class', 'ytitle')
            .attr('x', -1 * (plotHeight >> 1)) // x and y are flipped because of rotation
            .attr('y', -58) // Approximate width of y-axis
            .attr('transform', 'rotate(-90)')
            .style('text-anchor', 'middle')
            .style('alignment-baseline', 'central')
            .text('Growth Reduction');
        if (lines.length > 1) {
            // Put up a legend
            var legend = g.append('g')
                .attr('class', 'legend')
                .attr('transform', "translate(15, 15)");
            var rect = legend.append('rect');
            var legendItems = legend.append('g')
                .attr('class', 'legend-items');
            var liWithData = legendItems.selectAll('text')
                .data(lines)
                .enter();
            liWithData.append('text')
                .attr('x', '1.3em')
                .attr('y', function (l, i) { return i + "em"; })
                .text(function (l) { return l.name; });
            liWithData.append('line')
                .attr('class', function (_, i) { return "plot_" + i; })
                .attr('x1', 0)
                .attr('y1', function (d, i) { return i - 0.3 + "em"; })
                .attr('x2', "1em")
                .attr('y2', function (d, i) { return i - 0.3 + "em"; });
            // x, y, height, width
            var bbox = legendItems.node().getBBox();
            rect.attr('x', bbox.x - 5)
                .attr('y', bbox.y - 5)
                .attr('height', bbox.height + 10)
                .attr('width', bbox.width + 10);
        }
    };
    GrowthReductionGraph.prototype._hasHeapStats = function () {
        return !!this.props.bleakResults.heapStats && this.props.bleakResults.heapStats.length > 0;
    };
    GrowthReductionGraph.prototype._presentStat = function (stat, metric, se) {
        return "" + stat.toFixed(2) + metric + (se ? ", 95% CI [" + (stat - (1.96 * se)).toFixed(2) + ", " + (stat + (1.96 * se)).toFixed(2) + "]" : '');
    };
    GrowthReductionGraph.prototype.render = function () {
        // TODO: Growth reduction.
        return React.createElement("div", null, this._hasHeapStats() ?
            React.createElement("div", { ref: "d3_div", className: "heap-growth-graph" })
            : '');
    };
    return GrowthReductionGraph;
}(React.Component));
export default GrowthReductionGraph;
//# sourceMappingURL=data:application/json;base64,