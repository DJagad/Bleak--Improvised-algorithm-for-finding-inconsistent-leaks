import * as tslib_1 from "tslib";
import * as React from 'react';
import pathToString from '../../lib/path_to_string';
import StackTraceComponent from './stack_trace';
var LeakRootComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LeakRootComponent, _super);
    function LeakRootComponent(props, c) {
        var _this = _super.call(this, props, c) || this;
        _this.state = { expanded: false };
        return _this;
    }
    LeakRootComponent.prototype.render = function () {
        var _this = this;
        var lr = this.props.leakRoot;
        var paths = lr.paths;
        var keyPrefix = "" + this.props.rankBy + this.props.rank;
        var extraPathsToDisplay = this.state.expanded ? paths.length - 1 : 5;
        return React.createElement("div", { className: "card" },
            React.createElement("div", { className: "card-header", id: keyPrefix, key: keyPrefix },
                React.createElement("h5", { className: "mb-0" },
                    React.createElement("button", { className: "btn btn-link collapsed", "data-toggle": "collapse", "data-target": "#collapse" + keyPrefix, "aria-expanded": "false", "aria-controls": "collapse" + keyPrefix },
                        "Score ",
                        Math.floor(lr.scores[this.props.rankBy]),
                        " ",
                        pathToString(paths[0])))),
            React.createElement("div", { id: "collapse" + keyPrefix, className: "collapse", "aria-labelledby": keyPrefix },
                React.createElement("div", { className: "card-body" },
                    React.createElement("p", { className: paths.length > 1 ? "" : "hidden" }, "Also accessible via the following paths:"),
                    React.createElement("ul", { className: paths.length > 1 ? "" : "hidden" },
                        paths.slice(1, extraPathsToDisplay + 1).map(function (p, i) { return React.createElement("li", { key: keyPrefix + "Path" + i }, pathToString(p)); }),
                        React.createElement("li", { className: this.state.expanded || paths.length < 7 ? "hidden" : "" },
                            React.createElement("button", { className: "btn btn-link", style: { padding: 0 }, onClick: function () { return _this.setState({ expanded: true }); } },
                                "Show ",
                                paths.length - extraPathsToDisplay - 1,
                                " more..."))),
                    React.createElement("div", { className: "stack-trace-list" }, lr.stacks.map(function (s) { return _this.props.stackTraces.stackToFrames(s); }).map(function (s, i) {
                        var stKeyPrefix = keyPrefix + "Stack" + i;
                        return React.createElement("div", { className: "stack-trace", key: stKeyPrefix },
                            React.createElement("p", null,
                                React.createElement("b", null,
                                    "Stack Trace ",
                                    i + 1)),
                            React.createElement(StackTraceComponent, { keyPrefix: stKeyPrefix, selectedLocation: _this.props.selectedLocation, onStackFrameSelect: _this.props.onStackFrameSelect, stack: s }));
                    })),
                    React.createElement("div", { className: lr.stacks.length == 0 ? "" : "hidden" },
                        React.createElement("b", null, "No stack traces recorded!"),
                        " This could indicate a bug in BLeak. If your application is publicly available, please file a bug report ",
                        React.createElement("a", { href: "https://github.com/plasma-umass/bleak" }, "on GitHub"),
                        " with your configuration file so we can look into the problem."))));
    };
    return LeakRootComponent;
}(React.Component));
export default LeakRootComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVha19yb290LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3ZpZXdlci9jb21wb25lbnRzL2xlYWtfcm9vdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRS9CLE9BQU8sWUFBWSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sbUJBQW1CLE1BQU0sZUFBZSxDQUFDO0FBa0JoRDtJQUErQyw2Q0FBK0Q7SUFDNUcsMkJBQVksS0FBNkIsRUFBRSxDQUFNO1FBQWpELFlBQ0Usa0JBQU0sS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUVoQjtRQURDLEtBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7O0lBQ25DLENBQUM7SUFFTSxrQ0FBTSxHQUFiO1FBQUEsaUJBb0NDO1FBbkNDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBTSxTQUFTLEdBQUcsS0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQU0sQ0FBQztRQUMzRCxJQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyw2QkFBSyxTQUFTLEVBQUMsTUFBTTtZQUMxQiw2QkFBSyxTQUFTLEVBQUMsYUFBYSxFQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVM7Z0JBQ3hELDRCQUFJLFNBQVMsRUFBQyxNQUFNO29CQUNsQixnQ0FBUSxTQUFTLEVBQUMsd0JBQXdCLGlCQUFhLFVBQVUsaUJBQWMsY0FBWSxTQUFXLG1CQUFnQixPQUFPLG1CQUFnQixhQUFXLFNBQVc7O3dCQUMxSixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzs7d0JBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNqRSxDQUNOLENBQ0Q7WUFFTiw2QkFBSyxFQUFFLEVBQUUsYUFBVyxTQUFXLEVBQUUsU0FBUyxFQUFDLFVBQVUscUJBQWtCLFNBQVM7Z0JBQzlFLDZCQUFLLFNBQVMsRUFBQyxXQUFXO29CQUN4QiwyQkFBRyxTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSwrQ0FBOEM7b0JBQzVGLDRCQUFJLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRO3dCQUM1QyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsNEJBQUksR0FBRyxFQUFLLFNBQVMsWUFBTyxDQUFHLElBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFNLEVBQXZELENBQXVELENBQUM7d0JBQy9HLDRCQUFJLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFOzRCQUFFLGdDQUFRLFNBQVMsRUFBQyxjQUFjLEVBQUMsS0FBSyxFQUFFLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxFQUFFLE9BQU8sRUFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxFQUEvQixDQUErQjs7Z0NBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsR0FBRyxDQUFDOzJDQUFrQixDQUFLLENBQzlPO29CQUNMLDZCQUFLLFNBQVMsRUFBQyxrQkFBa0IsSUFDOUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQXZDLENBQXVDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQzt3QkFDdEUsSUFBTSxXQUFXLEdBQU0sU0FBUyxhQUFRLENBQUcsQ0FBQzt3QkFDNUMsTUFBTSxDQUFDLDZCQUFLLFNBQVMsRUFBQyxhQUFhLEVBQUMsR0FBRyxFQUFFLFdBQVc7NEJBQ2xEO2dDQUFHOztvQ0FBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBSyxDQUFJOzRCQUNqQyxvQkFBQyxtQkFBbUIsSUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLEtBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsS0FBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxHQUFJLENBQ3ZKLENBQUM7b0JBQ1QsQ0FBQyxDQUFDLENBQ0U7b0JBQ04sNkJBQUssU0FBUyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRO3dCQUNuRCwyREFBZ0M7O3dCQUF5RywyQkFBRyxJQUFJLEVBQUMsdUNBQXVDLGdCQUFjO3lGQUNsTSxDQUNGLENBQ0YsQ0FDRixDQUFDO0lBQ1QsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQTNDRCxDQUErQyxLQUFLLENBQUMsU0FBUyxHQTJDN0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTGVha1Jvb3QgZnJvbSAnLi4vLi4vbGliL2xlYWtfcm9vdCc7XG5pbXBvcnQgcGF0aFRvU3RyaW5nIGZyb20gJy4uLy4uL2xpYi9wYXRoX3RvX3N0cmluZyc7XG5pbXBvcnQgU3RhY2tUcmFjZUNvbXBvbmVudCBmcm9tICcuL3N0YWNrX3RyYWNlJztcbmltcG9ydCBTdGFja0ZyYW1lIGZyb20gJy4uL21vZGVsL3N0YWNrX2ZyYW1lJztcbmltcG9ydCBMb2NhdGlvbiBmcm9tICcuLi9tb2RlbC9sb2NhdGlvbic7XG5pbXBvcnQgU3RhY2tUcmFjZU1hbmFnZXIgZnJvbSAnLi4vbW9kZWwvc3RhY2tfdHJhY2VfbWFuYWdlcic7XG5cbmludGVyZmFjZSBMZWFrUm9vdENvbXBvbmVudFByb3BzIHtcbiAgcmFuazogbnVtYmVyO1xuICByYW5rQnk6IFwidHJhbnNpdGl2ZUNsb3N1cmVTaXplXCIgfCBcImxlYWtTaGFyZVwiIHwgXCJyZXRhaW5lZFNpemVcIiB8IFwib3duZWRPYmplY3RzXCI7XG4gIHN0YWNrVHJhY2VzOiBTdGFja1RyYWNlTWFuYWdlcjtcbiAgbGVha1Jvb3Q6IExlYWtSb290O1xuICBvblN0YWNrRnJhbWVTZWxlY3Q6IChzZjogU3RhY2tGcmFtZSkgPT4gdm9pZDtcbiAgc2VsZWN0ZWRMb2NhdGlvbjogTG9jYXRpb247XG59XG5cbmludGVyZmFjZSBMZWFrUm9vdENvbXBvbmVudFN0YXRlIHtcbiAgZXhwYW5kZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExlYWtSb290Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PExlYWtSb290Q29tcG9uZW50UHJvcHMsIExlYWtSb290Q29tcG9uZW50U3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IExlYWtSb290Q29tcG9uZW50UHJvcHMsIGM6IGFueSkge1xuICAgIHN1cGVyKHByb3BzLCBjKTtcbiAgICB0aGlzLnN0YXRlID0geyBleHBhbmRlZDogZmFsc2UgfTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgY29uc3QgbHIgPSB0aGlzLnByb3BzLmxlYWtSb290O1xuICAgIGNvbnN0IHBhdGhzID0gbHIucGF0aHM7XG4gICAgY29uc3Qga2V5UHJlZml4ID0gYCR7dGhpcy5wcm9wcy5yYW5rQnl9JHt0aGlzLnByb3BzLnJhbmt9YDtcbiAgICBjb25zdCBleHRyYVBhdGhzVG9EaXNwbGF5ID0gdGhpcy5zdGF0ZS5leHBhbmRlZCA/IHBhdGhzLmxlbmd0aCAtIDEgOiA1O1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1oZWFkZXJcIiBpZD17a2V5UHJlZml4fSBrZXk9e2tleVByZWZpeH0+XG4gICAgICAgIDxoNSBjbGFzc05hbWU9XCJtYi0wXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxpbmsgY29sbGFwc2VkXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGRhdGEtdGFyZ2V0PXtgI2NvbGxhcHNlJHtrZXlQcmVmaXh9YH0gYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1jb250cm9scz17YGNvbGxhcHNlJHtrZXlQcmVmaXh9YH0+XG4gICAgICAgICAgICBTY29yZSB7TWF0aC5mbG9vcihsci5zY29yZXNbdGhpcy5wcm9wcy5yYW5rQnldKX0ge3BhdGhUb1N0cmluZyhwYXRoc1swXSl9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvaDU+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBpZD17YGNvbGxhcHNlJHtrZXlQcmVmaXh9YH0gY2xhc3NOYW1lPVwiY29sbGFwc2VcIiBhcmlhLWxhYmVsbGVkYnk9e2tleVByZWZpeH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtwYXRocy5sZW5ndGggPiAxID8gXCJcIiA6IFwiaGlkZGVuXCJ9PkFsc28gYWNjZXNzaWJsZSB2aWEgdGhlIGZvbGxvd2luZyBwYXRoczo8L3A+XG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT17cGF0aHMubGVuZ3RoID4gMSA/IFwiXCIgOiBcImhpZGRlblwifT5cbiAgICAgICAgICAgIHtwYXRocy5zbGljZSgxLCBleHRyYVBhdGhzVG9EaXNwbGF5ICsgMSkubWFwKChwLCBpKSA9PiA8bGkga2V5PXtgJHtrZXlQcmVmaXh9UGF0aCR7aX1gfT57cGF0aFRvU3RyaW5nKHApfTwvbGk+KX1cbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9e3RoaXMuc3RhdGUuZXhwYW5kZWQgfHwgcGF0aHMubGVuZ3RoIDwgNyA/IFwiaGlkZGVuXCIgOiBcIlwifT48YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGlua1wiIHN0eWxlPXt7cGFkZGluZzogMH19IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoe2V4cGFuZGVkOiB0cnVlfSl9PlNob3cge3BhdGhzLmxlbmd0aCAtIGV4dHJhUGF0aHNUb0Rpc3BsYXkgLSAxfSBtb3JlLi4uPC9idXR0b24+PC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RhY2stdHJhY2UtbGlzdFwiPlxuICAgICAgICAgICAge2xyLnN0YWNrcy5tYXAoKHMpID0+IHRoaXMucHJvcHMuc3RhY2tUcmFjZXMuc3RhY2tUb0ZyYW1lcyhzKSkubWFwKChzLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHN0S2V5UHJlZml4ID0gYCR7a2V5UHJlZml4fVN0YWNrJHtpfWA7XG4gICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN0YWNrLXRyYWNlXCIga2V5PXtzdEtleVByZWZpeH0+XG4gICAgICAgICAgICAgICAgPHA+PGI+U3RhY2sgVHJhY2Uge2kgKyAxfTwvYj48L3A+XG4gICAgICAgICAgICAgICAgPFN0YWNrVHJhY2VDb21wb25lbnQga2V5UHJlZml4PXtzdEtleVByZWZpeH0gc2VsZWN0ZWRMb2NhdGlvbj17dGhpcy5wcm9wcy5zZWxlY3RlZExvY2F0aW9ufSBvblN0YWNrRnJhbWVTZWxlY3Q9e3RoaXMucHJvcHMub25TdGFja0ZyYW1lU2VsZWN0fSBzdGFjaz17c30gLz5cbiAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2xyLnN0YWNrcy5sZW5ndGggPT0gMCA/IFwiXCIgOiBcImhpZGRlblwifT5cbiAgICAgICAgICAgIDxiPk5vIHN0YWNrIHRyYWNlcyByZWNvcmRlZCE8L2I+IFRoaXMgY291bGQgaW5kaWNhdGUgYSBidWcgaW4gQkxlYWsuIElmIHlvdXIgYXBwbGljYXRpb24gaXMgcHVibGljbHkgYXZhaWxhYmxlLCBwbGVhc2UgZmlsZSBhIGJ1ZyByZXBvcnQgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9wbGFzbWEtdW1hc3MvYmxlYWtcIj5vbiBHaXRIdWI8L2E+IHdpdGggeW91ciBjb25maWd1cmF0aW9uIGZpbGUgc28gd2UgY2FuIGxvb2sgaW50byB0aGUgcHJvYmxlbS5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj47XG4gIH1cbn1cbiJdfQ==