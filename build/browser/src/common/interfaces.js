export function SnapshotEdgeTypeToString(se) {
    switch (se) {
        case 0 /* ContextVariable */:
            return "ContextVariable";
        case 1 /* Element */:
            return "Element";
        case 4 /* Hidden */:
            return "Hidden";
        case 3 /* Internal */:
            return "Internal";
        case 2 /* Property */:
            return "Property";
        case 5 /* Shortcut */:
            return "Shortcut";
        case 6 /* Weak */:
            return "Weak";
        default:
            return "(Unknown)";
    }
}
export function SnapshotNodeTypeToString(sn) {
    switch (sn) {
        case 1 /* Array */:
            return "Array";
        case 5 /* Closure */:
            return "Closure";
        case 4 /* Code */:
            return "Code";
        case 10 /* ConsString */:
            return "ConsString";
        case 7 /* HeapNumber */:
            return "HeapNumber";
        case 0 /* Hidden */:
            return "Hidden";
        case 8 /* Native */:
            return "Native";
        case 3 /* Object */:
            return "Object";
        case 6 /* RegExp */:
            return "RegExp";
        case 11 /* SlicedString */:
            return "SlicedString";
        case 2 /* String */:
            return "String";
        case 12 /* Symbol */:
            return "Symbol";
        case 9 /* Synthetic */:
            return "Synthetic";
        case 15 /* Unresolved */:
            return "Unresolved";
        default:
            return "(Unknown)";
    }
}
//# sourceMappingURL=data:application/json;base64,