var r = /'/g;
/**
 * Escapes single quotes in the given string.
 * @param s
 */
function safeString(s) {
    return s.replace(r, "\\'");
}
// From https://stackoverflow.com/a/2008444
// This is not *perfect*, but it's good enough for human output.
var JS_IDENTIFIER_REGEXP = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
/**
 * Returns true if the property definitely requires array notation.
 * This check is not sound, as we do not check for JavaScript reserved
 * words. However, it is 'good enough' for human output, e.g. in a report.
 * @param prop
 */
function propertyNeedsArrayNotation(prop) {
    return !JS_IDENTIFIER_REGEXP.test("" + prop);
}
function propertyAccessString(s) {
    if (typeof (s) === "number") {
        return "[" + s + "]";
    }
    else if (propertyNeedsArrayNotation(s)) {
        return "[\"" + safeString(s) + "\"]";
    }
    else {
        return "." + s;
    }
}
function prettyPrintDOMPath() {
    while (PS.nonempty()) {
        var segment = PS.pop();
        var name_1 = segment.indexOrName;
        if (name_1 === "root") {
            // Ignore this BLeak-inserted edge.
            // We're transitioning to a path outside of the DOM, on the DOM object itself.
            prettyPrintNonDOMPath();
        }
        else if (name_1 === 'childNodes') {
            PS.print(propertyAccessString(name_1));
        }
        else {
            // $$$CHILD$$$n => n
            var idx = parseInt(name_1.slice(11), 10);
            // Should alternate between 'childNode' and indices until it gets to 'root'.
            PS.print(propertyAccessString(idx));
        }
    }
}
function prettyPrintNonDOMPath() {
    while (PS.nonempty()) {
        var segment = PS.pop();
        switch (segment.type) {
            case 5 /* EVENT_LISTENER_LIST */: {
                // Will either be:
                // - A leak on the list itself.
                // - A leak *within* an event listener.
                // Seek forward to figure out which, and print appropriately
                // $$listeners.type[index].listener
                var typeSegment = PS.pop();
                if (!PS.nonempty()) {
                    // List leak
                    PS.pushString();
                    PS.print("List of '" + typeSegment.indexOrName + "' listeners on");
                    PS.pushString();
                }
                else {
                    var indexSegment = PS.pop();
                    PS.pop(); // Should be the '.listener' property, unless the application mucked with our metadata.
                    PS.pushString();
                    PS.print("on listener " + indexSegment.indexOrName + " in the list of '" + typeSegment.indexOrName + "' listeners on");
                    PS.pushString();
                }
                break;
            }
            case 3 /* CLOSURE */:
                PS.pushString();
                PS.print("within closure of");
                PS.pushString();
                break;
            case 4 /* CLOSURE_VARIABLE */:
                // Should've been preceded by CLOSURE.
                // Begins a new path in the string.
                PS.print(segment.indexOrName);
                break;
            default: {
                var indexOrName = segment.indexOrName;
                if (typeof (indexOrName) === "string" && indexOrName.startsWith("$$$on")) {
                    // Cut off the $$$. This is a mirrored event listener property.
                    indexOrName = indexOrName.slice(3);
                }
                // *Must* be a property on the previously-printed object.
                PS.print(propertyAccessString(indexOrName));
                break;
            }
        }
    }
}
var PathStream = /** @class */ (function () {
    function PathStream() {
        this._p = null;
        this._i = -1;
        this._s = null;
        this._ss = null;
    }
    PathStream.prototype.print = function (s) {
        if (this._s !== null) {
            this._s += s;
        }
    };
    PathStream.prototype.pushString = function () {
        if (this._ss !== null) {
            this._ss.push(this._s);
            this._s = "";
        }
    };
    PathStream.prototype.flush = function () {
        var s = this._s;
        var ss = this._ss;
        this._ss = this._s = null;
        ss.push(s);
        return ss.filter(function (s) { return s !== ""; }).reverse().join(" ");
    };
    PathStream.prototype.setPath = function (p) {
        this._p = p;
        this._i = 0;
        this._s = "";
        this._ss = [];
    };
    PathStream.prototype.advance = function () {
        this._i++;
    };
    PathStream.prototype.peek = function () {
        if (this.nonempty()) {
            return this._p[this._i];
        }
        else {
            return null;
        }
    };
    PathStream.prototype.pop = function () {
        var rv = this.peek();
        this.advance();
        return rv;
    };
    PathStream.prototype.nonempty = function () {
        return this._p && this._p.length > this._i;
    };
    return PathStream;
}());
// Singleton class.
var PS = new PathStream();
/**
 * Pretty print a path as a human-friendly string.
 * @param p
 */
export default function pathToString(p) {
    PS.setPath(p);
    var segment = PS.peek();
    if (segment.type === 6 /* DOM_TREE */) {
        PS.print("document");
        PS.advance();
        prettyPrintDOMPath();
    }
    else {
        PS.print("window");
        prettyPrintNonDOMPath();
    }
    return PS.flush();
}
//# sourceMappingURL=data:application/json;base64,