import { SourceMapConsumer } from 'source-map';
import { parse as ErrorStackParser } from 'error-stack-parser';
import { DEFAULT_AGENT_URL } from './mitmproxy_interceptor';
import { resolve as resolveURL } from 'url';
var magicString = '//# sourceMappingURL=data:application/json;base64,';
/**
 * Converts stack frames to get the position in the original source document.
 * Strips any frames from the given agent string.
 */
var StackFrameConverter = /** @class */ (function () {
    function StackFrameConverter(_results) {
        this._results = _results;
        this._maps = new Map();
    }
    /**
     * Converts the raw stack frames from the BLeak-instrumented source code of the application to the
     * application's original source code.
     *
     * Stores relevant StackFrame / source file data into the `results` object, and returns the stack frames
     * in results format.
     * @param proxy
     * @param pageUrl
     * @param results
     * @param traces
     * @param agentUrl
     */
    StackFrameConverter.ConvertGrowthStacks = function (proxy, pageUrl, results, traces, agentUrl) {
        if (agentUrl === void 0) { agentUrl = DEFAULT_AGENT_URL; }
        return new StackFrameConverter(results).convertGrowthStacks(proxy, pageUrl, traces, agentUrl);
    };
    StackFrameConverter.prototype._fetchMap = function (proxy, url) {
        if (typeof (url) !== "string") {
            return;
        }
        var map = this._maps.get(url);
        if (!map) {
            try {
                var stashedItem = proxy.getFromStash(url);
                var source = stashedItem.data.toString();
                var sourceMapOffset = source.lastIndexOf(magicString);
                if (sourceMapOffset > -1) {
                    sourceMapOffset += magicString.length;
                    var sourceMapBase64 = source.slice(sourceMapOffset);
                    var sourceMapString = new Buffer(sourceMapBase64, 'base64').toString('utf8');
                    var sourceMap = JSON.parse(sourceMapString);
                    var consumer = new SourceMapConsumer(sourceMap);
                    this._maps.set(url, consumer);
                    if (sourceMap.sourcesContent && sourceMap.sourcesContent.length > 0) {
                        var len = sourceMap.sourcesContent.length;
                        for (var i = 0; i < len; i++) {
                            this._results.addSourceFile(url, stashedItem.isJavaScript ? "text/javascript" : "text/html", sourceMap.sourcesContent[i]);
                        }
                    }
                }
                else {
                    this._results.addSourceFile(url, stashedItem.isJavaScript ? "text/javascript" : "text/html", source);
                }
            }
            catch (e) {
                // Failed to get map.
                console.error("Failed to get source map for " + url + ":");
                console.error(e);
            }
        }
    };
    StackFrameConverter.prototype.convertGrowthStacks = function (proxy, pageUrl, traces, agentUrl) {
        var _this = this;
        // First pass: Get all unique URLs and their source maps.
        var urls = new Set();
        var rawStacks = new Map();
        function frameFilter(f) {
            return (!f.fileName || f.fileName.indexOf(agentUrl) === -1) && (!f.functionName || (f.functionName.indexOf("eval") === -1 && f.functionName.indexOf(agentUrl) === -1));
        }
        function processFrame(f) {
            if (f.fileName && !f.fileName.toLowerCase().startsWith("http")) {
                f.fileName = resolveURL(pageUrl, f.fileName);
            }
            urls.add(f.fileName);
        }
        function processStack(s) {
            if (!rawStacks.has(s)) {
                var frames_1 = ErrorStackParser({ stack: s }).filter(frameFilter);
                frames_1.forEach(processFrame);
                rawStacks.set(s, frames_1);
            }
        }
        // Step 1: Collect all URLs.
        Object.keys(traces).forEach(function (stringId) {
            var id = parseInt(stringId, 10);
            traces[id].forEach(processStack);
        });
        // Step 2: Get files, parse source maps.
        urls.forEach(function (url) {
            _this._fetchMap(proxy, url);
        });
        // Step 3: Convert stacks.
        var convertedStacks = new Map();
        rawStacks.forEach(function (stack, k) {
            convertedStacks.set(k, _this._convertStack(stack));
        });
        // Step 4: Map stacks back into the return object.
        function mapStack(s) {
            return convertedStacks.get(s);
        }
        var rv = {};
        Object.keys(traces).forEach(function (stringId) {
            var id = parseInt(stringId, 10);
            rv[id] = traces[id].map(mapStack);
        });
        return rv;
    };
    StackFrameConverter.prototype._convertStack = function (stack) {
        var _this = this;
        return stack.map(function (frame) { return _this._convertStackFrame(frame); });
    };
    StackFrameConverter.prototype._convertStackFrame = function (frame) {
        var map = this._maps.get(frame.fileName);
        if (!map) {
            return this._results.addStackFrameFromObject(frame);
        }
        var ogPos = map.originalPositionFor({
            line: frame.lineNumber,
            column: frame.columnNumber
        });
        frame.lineNumber = ogPos.line;
        frame.columnNumber = ogPos.column;
        return this._results.addStackFrameFromObject(frame);
    };
    return StackFrameConverter;
}());
export default StackFrameConverter;
//# sourceMappingURL=data:application/json;base64,