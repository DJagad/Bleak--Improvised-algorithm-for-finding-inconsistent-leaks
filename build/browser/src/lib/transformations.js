import { Parser as HTMLParser, DomHandler, DomUtils } from 'htmlparser2';
export { exposeClosureState, ensureES5, nopTransform } from './closure_state_transform';
var HTML_PARSER_OPTS = { lowerCaseTags: false, lowerCaseAttributeNames: false };
export function parseHTML(source) {
    var rv;
    var err;
    var dom = new DomHandler(function (e, nodes) {
        rv = nodes;
        err = e;
    });
    var parser = new HTMLParser(dom, HTML_PARSER_OPTS);
    parser.write(source);
    parser.end();
    if (err) {
        return null;
    }
    return rv;
}
function identJSTransform(f, s) {
    return s;
}
/**
 * Inject the injection string into the <head> portion of the HTML source.
 *
 * If <head> is missing, attempts to inject after the <html> tag.
 *
 * @param filename Path to the HTML file.
 * @param source Source of an HTML file.
 * @param injection Content to inject into the head.
 */
export function injectIntoHead(filename, source, injection, jsTransform) {
    if (jsTransform === void 0) { jsTransform = identJSTransform; }
    var parsedHTML = parseHTML(source);
    if (parsedHTML === null) {
        // Parsing failed.
        return source;
    }
    var htmlNode;
    var headNode;
    var inlineScripts = [];
    function search(n) {
        // Traverse children first to avoid mutating state
        // before it is traversed.
        if (n.children) {
            n.children.forEach(search);
        }
        if (n.name) {
            switch (n.name.toLowerCase()) {
                case 'head':
                    if (!headNode) {
                        headNode = n;
                    }
                    break;
                case 'html':
                    if (!htmlNode) {
                        htmlNode = n;
                    }
                    break;
                case 'script':
                    var attribs = Object.keys(n.attribs);
                    var attribsLower = attribs.map(function (s) { return s.toLowerCase(); });
                    if (n.attribs && attribsLower.indexOf("src") === -1) {
                        var typeIndex = attribsLower.indexOf("type");
                        if (typeIndex !== -1) {
                            var type = n.attribs[attribs[typeIndex]].toLowerCase();
                            switch (type) {
                                case 'application/javascript':
                                case 'text/javascript':
                                case 'text/x-javascript':
                                case 'text/x-javascript':
                                    break;
                                default:
                                    // IGNORE non-JS script tags.
                                    // These are used for things like templates.
                                    return;
                            }
                        }
                        inlineScripts.push(n);
                    }
                    break;
            }
        }
    }
    parsedHTML.forEach(search);
    if (headNode || htmlNode) {
        var injectionTarget = headNode ? headNode : htmlNode;
        if (!injectionTarget.children) {
            injectionTarget.children = [];
        }
        injectionTarget.children = injection.concat(injectionTarget.children);
    }
    else {
        // AngularJS??
        return source;
    }
    inlineScripts.forEach(function (n, i) {
        if (!n.children || n.children.length !== 1) {
            console.log("Weird! Found JS node with the following children: " + JSON.stringify(n.children));
        }
        n.children[0].data = jsTransform(filename + "-inline" + i + ".js", n.children[0].data);
    });
    return DomUtils.getOuterHTML(parsedHTML);
}
//# sourceMappingURL=data:application/json;base64,