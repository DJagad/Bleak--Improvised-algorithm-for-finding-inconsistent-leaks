import * as tslib_1 from "tslib";
import BLeak from '../src/lib/bleak';
import createHTTPServer from './util/http_server';
import ChromeDriver from '../src/lib/chrome_driver';
import { readFileSync } from 'fs';
import { equal as assertEqual } from 'assert';
import NopProgressBar from '../src/lib/nop_progress_bar';
var HTTP_PORT = 8875;
var DEBUG = false;
function getHTMLDoc(docStr) {
    return {
        mimeType: 'text/html',
        data: Buffer.from(docStr, 'utf8')
    };
}
function getHTMLConfig(name) {
    return getHTMLDoc("<!DOCTYPE html><html><head><title>" + name + "</title></head><body><button id=\"btn\">Click Me</button><script type=\"text/javascript\" src=\"/" + name + ".js\"></script></body></html>");
}
// 'Files' present in the test HTTP server
var FILES = {
    '/test.html': getHTMLConfig('test'),
    '/test.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("var obj = {};\n    var i = 0;\n    var power = 2;\n    document.getElementById('btn').addEventListener('click', function() {\n      var top = Math.pow(2, power);\n      power++;\n      for (var j = 0; j < top; j++) {\n        obj[Math.random()] = Math.random();\n      }\n    });\n    ", 'utf8')
    },
    '/closure_test.html': getHTMLConfig('closure_test'),
    '/closure_test.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("(function() {\n      var obj = {};\n      var i = 0;\n      var power = 2;\n      window.objfcn = function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          obj[Math.random()] = Math.random();\n        }\n      };\n    })();\n    document.getElementById('btn').addEventListener('click', function() {\n      window.objfcn();\n    });")
    },
    '/closure_test_dom.html': getHTMLConfig('closure_test_dom'),
    '/closure_test_dom.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("(function() {\n      var obj = {};\n      var i = 0;\n      var power = 2;\n      document.getElementById('btn').addEventListener('click', function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          obj[Math.random()] = Math.random();\n        }\n      });\n    })();\n    ", 'utf8')
    },
    '/closure_test_dom_on_property.html': getHTMLConfig('closure_test_dom_on_property'),
    '/closure_test_dom_on_property.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("(function() {\n      var obj = {};\n      var i = 0;\n      var power = 2;\n      document.getElementById('btn').onclick = function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          obj[Math.random()] = Math.random();\n        }\n      };\n    })();\n    ", 'utf8')
    },
    '/closure_test_irrelevant_dom.html': getHTMLDoc("<!DOCTYPE html><html><head><title>Closure test irrelevant dom</title></head><body><button id=\"btn2\">Don't click me</button><button id=\"btn\">Click Me</button><button id=\"btn3\">Don't click me, either</button><script type=\"text/javascript\" src=\"/closure_test_irrelevant_dom.js\"></script></body></html>"),
    '/closure_test_irrelevant_dom.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("(function() {\n      var obj = {};\n      var i = 0;\n      var power = 2;\n      document.getElementById('btn').addEventListener('click', function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          obj[Math.random()] = Math.random();\n        }\n      });\n    })();\n    ", 'utf8')
    },
    '/closure_test_disconnected_dom.html': getHTMLDoc("<!DOCTYPE html><html><head><title>Closure test disconnected dom</title></head><body><button id=\"btn\">Click Me</button><script type=\"text/javascript\" src=\"/closure_test_disconnected_dom.js\"></script></body></html>"),
    '/closure_test_disconnected_dom.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("(function() {\n      var obj = {};\n      var i = 0;\n      var power = 2;\n      var btn = document.createElement('button');\n      btn.addEventListener('click', function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          obj[Math.random()] = Math.random();\n        }\n      });\n      window.$$btn = btn;\n    })();\n    (function() {\n      document.getElementById('btn').addEventListener('click', function() {\n        window.$$btn.click();\n      });\n    })();\n    ", 'utf8')
    },
    /*'/closure_test_disconnected_dom_collection.html': getHTMLDoc(`<!DOCTYPE html><html><head><title>Closure test disconnected dom collection</title></head><body><button id="btn">Click Me</button><script type="text/javascript" src="/closure_test_disconnected_dom_collection.js"></script></body></html>`),
    '/closure_test_disconnected_dom_collection.js': {
      mimeType: 'text/javascript',
      data: Buffer.from(`(function() {
        var obj = {};
        var i = 0;
        var power = 2;
        document.body.appendChild(document.createElement('button'));
        var buttons = document.getElementsByTagName('button');
        buttons[1].addEventListener('click', function() {
          var top = Math.pow(2, power);
          power++;
          for (var j = 0; j < top; j++) {
            obj[Math.random()] = Math.random();
          }
        });
        document.body.removeChild(buttons[1]);
        window.$$btns = buttons;
      })();
      (function() {
        document.getElementById('btn').addEventListener('click', function() {
          window.$$btns[1].click();
        });
      })();
      `, 'utf8')
    },*/
    '/reassignment_test.html': getHTMLConfig('reassignment_test'),
    '/reassignment_test.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("\n    (function() {\n      var obj = [];\n      var i = 0;\n      var power = 2;\n      document.getElementById('btn').addEventListener('click', function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          obj = obj.concat({ val: Math.random() });\n        }\n      });\n    })();\n    ", 'utf8')
    },
    '/multiple_paths_test.html': getHTMLConfig('multiple_paths_test'),
    '/multiple_paths_test.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("(function() {\n      var obj = {};\n      var obj2 = obj;\n      var i = 0;\n      var power = 2;\n      document.getElementById('btn').addEventListener('click', function() {\n        var top = Math.pow(2, power);\n        power++;\n        for (var j = 0; j < top; j++) {\n          if (obj === obj2) {\n            var target = Math.random() > 0.5 ? obj : obj2;\n            target[Math.random()] = Math.random();\n          }\n        }\n      });\n    })();\n    ", 'utf8')
    },
    '/irrelevant_paths_test.html': getHTMLConfig('irrelevant_paths_test'),
    '/irrelevant_paths_test.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("var obj = {};\n    var i = 0;\n    var power = 2;\n    document.getElementById('btn').addEventListener('click', function() {\n      var top = Math.pow(2, power);\n      power++;\n      for (var j = 0; j < top; j++) {\n        obj[Math.random()] = Math.random();\n      }\n      // Adds more properties, but properly deletes them.\n      // Not a leak.\n      var second = Math.random();\n      obj[second] = second;\n      delete obj[second];\n    });", 'utf8')
    },
    '/event_listener_leak.html': getHTMLConfig('event_listener_leak'),
    '/event_listener_leak.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("\n    // Make unique functions so we can register many listeners.\n    function getAddListener() {\n      return function() {\n        document.getElementById('btn').addEventListener('click', getAddListener()); document.getElementById('btn').addEventListener('click', getAddListener()); document.getElementById('btn').addEventListener('click', getAddListener()); document.getElementById('btn').addEventListener('click', getAddListener());\n      };\n    }\n    getAddListener()();", 'utf8')
    },
    '/event_listener_removal.html': getHTMLConfig('event_listener_removal'),
    '/event_listener_removal.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("\n    // Make unique functions so we can register many listeners.\n    function getAddListener() {\n      return function() {\n        document.getElementById('btn').addEventListener('click', getAddListener()); document.getElementById('btn').addEventListener('click', getAddListener()); document.getElementById('btn').addEventListener('click', getAddListener()); document.getElementById('btn').addEventListener('click', getAddListener());\n      };\n    }\n    getAddListener()();\n    // Responsible function\n    document.getElementById('btn').addEventListener('click', function() {\n      var b = document.getElementById('btn');\n      var l = getAddListener();\n      b.addEventListener('click', l);\n      b.removeEventListener('click', l);\n    });", 'utf8')
    },
    '/dom_growth_test.html': getHTMLConfig('dom_growth_test'),
    '/dom_growth_test.js': {
        mimeType: 'text/javascript',
        data: Buffer.from("var body = document.getElementsByTagName('body')[0];\n    document.getElementById('btn').addEventListener('click', function() {\n      body.appendChild(document.createElement('div'));\n    });", 'utf8')
    },
    '/bleak_agent.js': {
        mimeType: 'text/javascript',
        data: readFileSync(require.resolve('../src/lib/bleak_agent'))
    }
};
describe('End-to-end Tests', function () {
    // 10 minute timeout.
    this.timeout(600000);
    var httpServer;
    var driver;
    before(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, createHTTPServer(FILES, HTTP_PORT)];
                    case 1:
                        httpServer = _a.sent();
                        if (!DEBUG) {
                            // Silence debug messages.
                            console.debug = function () { };
                        }
                        return [4 /*yield*/, ChromeDriver.Launch(console, true, 1920, 1080)];
                    case 2:
                        driver = _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    function createStandardLeakTest(description, rootFilename, expected_line) {
        it(description, function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, BLeak.FindLeaks("\n        exports.url = 'http://localhost:" + HTTP_PORT + "/" + rootFilename + ".html';\n        // Due to throttling (esp. when browser is in background), it may take longer\n        // than anticipated for the click we fire to actually run. We want to make\n        // sure all snapshots occur after the click processes.\n        var startedClickCount = 0;\n        var completedClickCount = 0;\n        exports.loop = [\n          {\n            name: 'Click Button',\n            check: function() {\n              return document.readyState === \"complete\" && startedClickCount === completedClickCount;\n            },\n            next: function() {\n              startedClickCount++;\n              if (completedClickCount === 0) {\n                document.getElementById('btn').addEventListener('click', function() {\n                  completedClickCount++;\n                });\n              }\n              document.getElementById('btn').click();\n            }\n          }\n        ];\n        exports.timeout = 30000;\n        exports.iterations = 3;\n        exports.postCheckSleep = 100;\n      ", new NopProgressBar(), driver /*, (ss) => {
                              const stream = createWriteStream(`${rootFilename}${i}.heapsnapshot`);
                              ss.onSnapshotChunk = function(chunk, end) {
                                stream.write(chunk);
                                if (end) {
                                  stream.end();
                                }
                              };
                              i++;
                              return Promise.resolve();
                            }*/)];
                        case 1:
                            result = _a.sent();
                            assertEqual(result.leaks.length > 0, true);
                            result.leaks.forEach(function (leak) {
                                var stacks = leak.stacks;
                                assertEqual(stacks.length > 0, true);
                                stacks.forEach(function (s) {
                                    assertEqual(s.length > 0, true);
                                    var topFrame = result.stackFrames[s[0]];
                                    //console.log(topFrame.toString());
                                    assertEqual(topFrame[1], expected_line);
                                    assertEqual(topFrame[0].indexOf(rootFilename + ".js") !== -1, true);
                                });
                            });
                            return [2 /*return*/];
                    }
                });
            });
        });
    }
    createStandardLeakTest('Catches leaks', 'test', 8);
    createStandardLeakTest('Catches leaks in closures', 'closure_test', 9);
    createStandardLeakTest('Catches leaks in closures on dom', 'closure_test_dom', 9);
    createStandardLeakTest('Catches leaks in closures when event listener is assigned on a property', 'closure_test_dom_on_property', 9);
    createStandardLeakTest('Catches leaks in closures, even with irrelevant DOM objects', 'closure_test_irrelevant_dom', 9);
    createStandardLeakTest('Catches leaks in closures, even with disconnected DOM fragments', 'closure_test_disconnected_dom', 10);
    // Not supported.
    // createStandardLeakTest('Catches leaks in closures, even with disconnected DOM collections', 'closure_test_disconnected_dom_collection', 11);
    createStandardLeakTest('Catches leaks when object is copied and reassigned', 'reassignment_test', 10);
    createStandardLeakTest('Catches leaks when object stored in multiple paths', 'multiple_paths_test', 12);
    createStandardLeakTest('Ignores code that does not grow objects', 'irrelevant_paths_test', 8);
    createStandardLeakTest('Catches event listener leaks', 'event_listener_leak', 5);
    createStandardLeakTest('Ignores responsible event listener removal', 'event_listener_removal', 5);
    createStandardLeakTest('Catches leaks that grow DOM unboundedly', 'dom_growth_test', 3);
    after(function (done) {
        //setTimeout(function() {
        // Shutdown both HTTP server and proxy.
        function finish() {
            httpServer.close(function (e) {
                if (e) {
                    done(e);
                }
                else {
                    driver.shutdown().then(function () {
                        done();
                    }).catch(done);
                }
            });
        }
        DEBUG ? setTimeout(finish, 99999999) : finish();
        //}, 99999999);
    });
});
//# sourceMappingURL=data:application/json;base64,