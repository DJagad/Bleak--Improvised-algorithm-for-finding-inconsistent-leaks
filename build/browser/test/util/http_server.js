import { createServer as createHTTPServer } from 'http';
function sendResponse(res, testFile) {
    res.statusCode = 200;
    res.setHeader('content-type', testFile.mimeType);
    if (testFile.headers) {
        Object.keys(testFile.headers).forEach(function (k) {
            res.setHeader(k, testFile.headers[k]);
        });
    }
    res.write(testFile.data);
    res.end();
}
/**
 * Creates a test HTTP server that serves up static in-memory "files".
 * @param files Map from server path to file data.
 * @param port Port to listen on for HTTP requests.
 */
export default function createSimpleServer(files, port) {
    return new Promise(function (res, rej) {
        // Start test HTTP server + proxy.
        var httpServer = createHTTPServer(function (req, res) {
            var url = req.url.toLowerCase();
            var testFile = files[url] || files['/'];
            if (testFile) {
                sendResponse(res, testFile);
            }
            else {
                res.statusCode = 404;
                res.end();
            }
        });
        httpServer.listen(port, function (e) {
            if (e) {
                rej(e);
            }
            else {
                res(httpServer);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cF9zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3V0aWwvaHR0cF9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksSUFBSSxnQkFBZ0IsRUFBdUMsTUFBTSxNQUFNLENBQUM7QUFRNUYsc0JBQXNCLEdBQW1CLEVBQUUsUUFBa0I7SUFDM0QsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDckIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUM7WUFDdEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sNkJBQTZCLEtBQWlDLEVBQUUsSUFBWTtJQUN4RixNQUFNLENBQUMsSUFBSSxPQUFPLENBQWEsVUFBQyxHQUFHLEVBQUUsR0FBRztRQUN0QyxrQ0FBa0M7UUFDbEMsSUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsVUFBUyxHQUFHLEVBQUUsR0FBRztZQUNuRCxJQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDYixZQUFZLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzlCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztnQkFDckIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1osQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBQyxDQUFNO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ1IsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZVNlcnZlciBhcyBjcmVhdGVIVFRQU2VydmVyLCBTZXJ2ZXIgYXMgSFRUUFNlcnZlciwgU2VydmVyUmVzcG9uc2V9IGZyb20gJ2h0dHAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RGaWxlIHtcbiAgbWltZVR5cGU6IHN0cmluZztcbiAgZGF0YTogQnVmZmVyO1xuICBoZWFkZXJzPzoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9O1xufVxuXG5mdW5jdGlvbiBzZW5kUmVzcG9uc2UocmVzOiBTZXJ2ZXJSZXNwb25zZSwgdGVzdEZpbGU6IFRlc3RGaWxlKTogdm9pZCB7XG4gIHJlcy5zdGF0dXNDb2RlID0gMjAwO1xuICByZXMuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCB0ZXN0RmlsZS5taW1lVHlwZSk7XG4gIGlmICh0ZXN0RmlsZS5oZWFkZXJzKSB7XG4gICAgT2JqZWN0LmtleXModGVzdEZpbGUuaGVhZGVycykuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgcmVzLnNldEhlYWRlcihrLCB0ZXN0RmlsZS5oZWFkZXJzW2tdKTtcbiAgICB9KTtcbiAgfVxuICByZXMud3JpdGUodGVzdEZpbGUuZGF0YSk7XG4gIHJlcy5lbmQoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGVzdCBIVFRQIHNlcnZlciB0aGF0IHNlcnZlcyB1cCBzdGF0aWMgaW4tbWVtb3J5IFwiZmlsZXNcIi5cbiAqIEBwYXJhbSBmaWxlcyBNYXAgZnJvbSBzZXJ2ZXIgcGF0aCB0byBmaWxlIGRhdGEuXG4gKiBAcGFyYW0gcG9ydCBQb3J0IHRvIGxpc3RlbiBvbiBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2ltcGxlU2VydmVyKGZpbGVzOiB7W3BhdGg6IHN0cmluZ106IFRlc3RGaWxlfSwgcG9ydDogbnVtYmVyKTogUHJvbWlzZTxIVFRQU2VydmVyPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxIVFRQU2VydmVyPigocmVzLCByZWopID0+IHtcbiAgICAvLyBTdGFydCB0ZXN0IEhUVFAgc2VydmVyICsgcHJveHkuXG4gICAgY29uc3QgaHR0cFNlcnZlciA9IGNyZWF0ZUhUVFBTZXJ2ZXIoZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgICAgIGNvbnN0IHVybCA9IHJlcS51cmwudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNvbnN0IHRlc3RGaWxlID0gZmlsZXNbdXJsXSB8fCBmaWxlc1snLyddO1xuICAgICAgaWYgKHRlc3RGaWxlKSB7XG4gICAgICAgIHNlbmRSZXNwb25zZShyZXMsIHRlc3RGaWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDA0O1xuICAgICAgICByZXMuZW5kKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaHR0cFNlcnZlci5saXN0ZW4ocG9ydCwgKGU6IGFueSkgPT4ge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgcmVqKGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMoaHR0cFNlcnZlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSJdfQ==