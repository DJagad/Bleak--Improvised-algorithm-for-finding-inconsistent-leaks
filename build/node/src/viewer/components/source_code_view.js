"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const file_list_1 = require("./file_list/file_list");
const react_ace_1 = require("react-ace");
const path_to_string_1 = require("../../lib/path_to_string");
const location_1 = require("../model/location");
const brace_1 = require("brace");
require("brace/mode/javascript");
require("brace/theme/github");
require("brace/ext/searchbox");
const Range = brace_1.acequire('ace/range').Range;
class EditorFileState {
    constructor(location, prettyPrinted) {
        this.location = location;
        this.prettyPrinted = prettyPrinted;
    }
}
class CharStream {
    constructor() {
        this._source = null;
        this._lineText = null;
        this._startLocation = null;
        this._line = -1;
        this._column = -1;
    }
    init(source, location) {
        this._source = source;
        this._startLocation = location;
        this._line = location.lineZeroIndexed;
        this._column = location.columnZeroIndexed;
        this._lineText = source.getLine(this._line);
    }
    EOF() {
        return this._line >= this._source.getLength();
    }
    nextChar() {
        this._column++;
        if (this._column >= this._lineText.length) {
            this._line++;
            this._column = 0;
            this._lineText = this._source.getLine(this._line);
        }
        return this._lineText[this._column];
    }
    toRange() {
        return new Range(this._startLocation.lineZeroIndexed, this._startLocation.column, this._line, this._column + 1);
    }
}
const CHAR_STREAM = new CharStream();
class SourceCodeView extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            openFile: this.props.location.file,
            editorState: new Map(),
            highlightedFrames: this.props.stackTraces.getFramesForFile(this.props.location.file)
        };
        // Initialize editorState for all files.
        this.props.files.getSourceFiles().forEach((f) => {
            const efs = new EditorFileState(new location_1.default(f, 1, 1, true), false);
            this.state.editorState.set(f, efs);
            if (f === this.state.openFile) {
                efs.location = this.props.location;
            }
        });
    }
    componentDidMount() {
        this._updateAceEditor();
        // TODO: On click annotation / marker, select frames in left pane.
        /*const editor: AceAjax.Editor = (this.refs.aceEditor as any).editor;
        editor.on('click', (e) => {
          const pos = e.getDocumentPosition();
          const row = pos.row;
          const col = pos.column;
        });*/
        // guttermousedown
        const editor = this.refs.aceEditor.editor;
        editor.$blockScrolling = Infinity;
        //
    }
    componentDidUpdate() {
        this._updateAceEditor();
    }
    _updateAceEditor() {
        const editor = this.refs.aceEditor.editor;
        // Scroll into view
        const editorState = this.state.editorState.get(this.state.openFile);
        const prettyPrint = editorState.prettyPrinted;
        const editorStateLocation = prettyPrint ? editorState.location.getFormattedLocation() : editorState.location.getOriginalLocation();
        // Scroll into center of view. (Column is 1-indexed here, row is 0-indexed)
        editor.renderer.scrollCursorIntoView(editorStateLocation.toAceEditorLocation(), 0.5);
        const session = editor.getSession();
        const frames = this.state.highlightedFrames;
        // Display annotations for file.
        const annotations = frames.map((f) => {
            const ogLocation = f.getOriginalLocation();
            const location = prettyPrint ? f.getFormattedLocation() : f.getOriginalLocation();
            const leaks = this.props.stackTraces.getLeaksForLocation(ogLocation);
            return Object.assign({
                type: 'error',
                text: `Contributes to memory leaks:\n${leaks.map((l) => path_to_string_1.default(l.paths[0])).join(",\n")}`
            }, location.toAceEditorLocation());
        });
        session.setAnnotations(annotations);
        // Remove old markers.
        const markers = session.getMarkers(false);
        for (const prop in markers) {
            if (markers.hasOwnProperty(prop)) {
                session.removeMarker(markers[prop].id);
            }
        }
        const doc = session.getDocument();
        // Display markers.
        frames.forEach((f) => {
            const location = prettyPrint ? f.getFormattedLocation() : f.getOriginalLocation();
            const displayed = f.equal(editorState.location);
            let parensDeep = 0;
            let inString = false;
            let stringChar = null;
            let nextEscaped = false;
            let onlyWhitespace = true;
            CHAR_STREAM.init(doc, location);
            // Hacky heuristic to figure out what to highlight.
            outerLoop: while (!CHAR_STREAM.EOF()) {
                const c = CHAR_STREAM.nextChar();
                if (inString) {
                    if (nextEscaped) {
                        nextEscaped = false;
                        continue;
                    }
                    switch (c) {
                        case '\\':
                            nextEscaped = true;
                        default:
                            inString = c === stringChar;
                            break;
                    }
                }
                else if (parensDeep > 0) {
                    switch (c) {
                        case '(':
                            parensDeep++;
                            break;
                        case ')':
                            parensDeep--;
                            break;
                    }
                    if (parensDeep === 0) {
                        // Break outer loop.
                        // We reached the end of a function call.
                        break outerLoop;
                    }
                }
                else {
                    switch (c) {
                        case '"':
                        case "'":
                            onlyWhitespace = false;
                            inString = true;
                            stringChar = c;
                            break;
                        case '(':
                            onlyWhitespace = false;
                            parensDeep = 1;
                            break;
                        case ';':
                        case ',':
                        case ':':
                            onlyWhitespace = false;
                        // FALL-THRU!
                        case '\r':
                        case '\n':
                            // End of statement.
                            if (!onlyWhitespace) {
                                break outerLoop;
                            }
                            break;
                    }
                }
            }
            session.addMarker(CHAR_STREAM.toRange(), displayed ? 'leak_line_selected' : 'leak_line', 'someType', false);
        });
    }
    componentWillReceiveProps(props) {
        const loc = props.location;
        this._changeOpenFile(true, loc);
    }
    _changeOpenFile(fromProps, location) {
        if (!fromProps && location.file === this.state.openFile) {
            return;
        }
        const editor = this.refs.aceEditor.editor;
        const lastRow = editor.getLastVisibleRow();
        const firstRow = editor.getFirstVisibleRow();
        const middle = Math.floor((lastRow - firstRow) / 2) + firstRow + 1;
        const oldFileState = this.state.editorState.get(this.state.openFile);
        oldFileState.location = new location_1.default(this.state.openFile, middle, 1, !oldFileState.prettyPrinted);
        const newFileState = this.state.editorState.get(location.file);
        newFileState.location = location;
        const frames = this.props.stackTraces.getFramesForFile(location.file);
        this.setState({ openFile: location.file, highlightedFrames: frames });
    }
    _prettyPrintToggle() {
        const fileState = this.state.editorState.get(this.state.openFile);
        fileState.prettyPrinted = !fileState.prettyPrinted;
        this.setState({ editorState: this.state.editorState });
    }
    render() {
        const sourceFile = this.state.openFile;
        const openFileState = this.state.editorState.get(sourceFile);
        return React.createElement("div", { className: "row" },
            React.createElement("div", { className: "col-lg-3" },
                React.createElement(file_list_1.default, { files: this.props.files, editorFile: this.state.openFile, onFileSelected: (f) => {
                        this._changeOpenFile(false, this.state.editorState.get(f).location);
                    } })),
            React.createElement("div", { className: "col-lg-9" },
                React.createElement("div", { className: "row" },
                    React.createElement("div", { className: "col-lg-9" },
                        React.createElement("p", null,
                            React.createElement("b", null,
                                this.state.openFile.url,
                                " ",
                                openFileState.prettyPrinted ? '(Pretty Printed)' : ''))),
                    React.createElement("div", { className: "col-lg-3" },
                        React.createElement("button", { type: "button", className: "btn btn-secondary", onClick: this._prettyPrintToggle.bind(this) }, openFileState.prettyPrinted ? 'View Original' : 'Pretty Print'))),
                React.createElement(react_ace_1.default, { ref: "aceEditor", readOnly: true, mode: "javascript", theme: "github", width: "100%", highlightActiveLine: false, setOptions: { highlightGutterLine: false, useWorker: false }, value: openFileState.prettyPrinted ? sourceFile.formattedSource : sourceFile.source })));
    }
}
exports.default = SourceCodeView;
//# sourceMappingURL=data:application/json;base64,