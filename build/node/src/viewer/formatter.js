"use strict";
// Copyright 2014 The Chromium Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Object.defineProperty(exports, "__esModule", { value: true });
// This file contains wrappers around the Chromium Development Tool's
// JavaScript source code formatter. These wrappers were manually converted
// to TypeScript and simplified from the original source.
const location_1 = require("./model/location");
class PendingFormatRequest {
    constructor(original, success, error) {
        this.original = original;
        this.success = success;
        this.error = error;
    }
}
class FormatWorker {
    constructor(ready) {
        this._queue = [];
        // Use the original, unmodified worker code from Chrome devtools.
        this._w = new Worker("chrome-devtools-frontend/front_end/formatter_worker.js");
        this._w.onmessage = (e) => {
            if (e.data === "workerReady") {
                return ready(this);
            }
            if (this._queue.length > 0) {
                const d = e.data;
                const i = this._queue.shift();
                const ogLe = computeLineEndings(i.original);
                const formattedLe = computeLineEndings(d.content);
                i.success(i.original, d.content, new FormatterSourceMapping(ogLe, formattedLe, d.mapping));
            }
            else {
                console.error(`Received unsolicited message from FormatWorker: ${e.data}`);
            }
        };
        this._w.onerror = (e) => {
            if (this._queue.length > 0) {
                const i = this._queue.shift();
                i.error(e.error);
            }
            else {
                console.error(`Received uncaught error in FormatWorker: ${e.error}`);
            }
        };
    }
    static async Create() {
        return new Promise((resolve, reject) => {
            new FormatWorker(resolve);
        });
    }
    format(source, mimeType, onsuccess, onerror) {
        const req = {
            method: "format",
            params: {
                mimeType: mimeType,
                content: source,
                indentString: "  "
            }
        };
        this._queue.push(new PendingFormatRequest(source, onsuccess, onerror));
        this._w.postMessage(req);
    }
}
exports.default = FormatWorker;
function findAll(str, toFind) {
    var matches = [];
    var i = str.indexOf(toFind);
    while (i !== -1) {
        matches.push(i);
        i = str.indexOf(toFind, i + toFind.length);
    }
    return matches;
}
;
function computeLineEndings(str) {
    const endings = findAll(str, '\n');
    endings.push(str.length);
    return endings;
}
function defaultComparator(a, b) {
    return a < b ? -1 : (a > b ? 1 : 0);
}
function upperBound(arr, item) {
    var l = 0;
    var r = arr.length;
    while (l < r) {
        var m = (l + r) >> 1;
        if (defaultComparator(item, arr[m]) >= 0)
            l = m + 1;
        else
            r = m;
    }
    return r;
}
class FormatterSourceMapping {
    constructor(_originalLineEndings, _formattedLineEndings, _mapping) {
        this._originalLineEndings = _originalLineEndings;
        this._formattedLineEndings = _formattedLineEndings;
        this._mapping = _mapping;
    }
    static locationToPosition(lineEndings, location) {
        const lineNumber = location.lineZeroIndexed;
        const columnNumber = location.columnZeroIndexed;
        const position = lineNumber ? lineEndings[lineNumber - 1] + 1 : 0;
        return position + columnNumber;
    }
    static positionToLocation(lineEndings, file, position, forOriginal) {
        const lineNumber = upperBound(lineEndings, position - 1);
        let columnNumber;
        if (!lineNumber) {
            columnNumber = position;
        }
        else {
            columnNumber = position - lineEndings[lineNumber - 1] - 1;
        }
        return new location_1.default(file, lineNumber + 1, columnNumber + 1, forOriginal);
    }
    originalToFormatted(location) {
        const originalPosition = FormatterSourceMapping.locationToPosition(this._originalLineEndings, location);
        const formattedPosition = this._convertPosition(this._mapping.original, this._mapping.formatted, originalPosition || 0);
        return FormatterSourceMapping.positionToLocation(this._formattedLineEndings, location.file, formattedPosition || 0, false);
    }
    formattedToOriginal(location) {
        const formattedPosition = FormatterSourceMapping.locationToPosition(this._formattedLineEndings, location);
        const originalPosition = this._convertPosition(this._mapping.formatted, this._mapping.original, formattedPosition);
        return FormatterSourceMapping.positionToLocation(this._originalLineEndings, location.file, originalPosition || 0, true);
    }
    _convertPosition(positions1, positions2, position) {
        const index = upperBound(positions1, position) - 1;
        let convertedPosition = positions2[index] + position - positions1[index];
        if (index < positions2.length - 1 && convertedPosition > positions2[index + 1]) {
            convertedPosition = positions2[index + 1];
        }
        return convertedPosition;
    }
}
exports.FormatterSourceMapping = FormatterSourceMapping;
//# sourceMappingURL=data:application/json;base64,