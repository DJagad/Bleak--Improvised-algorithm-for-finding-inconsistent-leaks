"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const heap_snapshot_parser_1 = require("../lib/heap_snapshot_parser");
const chrome_debugging_client_1 = require("chrome-debugging-client");
const tot_1 = require("chrome-debugging-client/dist/protocol/tot");
const fs_1 = require("fs");
const path_1 = require("path");
const repl = require("repl");
const esprima_1 = require("esprima");
const childProcess = require("child_process");
const mitmproxy_1 = require("mitmproxy");
const os_1 = require("os");
const util_1 = require("../common/util");
// HACK: Patch spawn to work around chrome-debugging-client limitation
// https://github.com/krisselden/chrome-debugging-client/issues/10
const originalSpawn = childProcess.spawn;
childProcess.spawn = function (command, args, options) {
    if (args && Array.isArray(args)) {
        const index = args.indexOf("--no-proxy-server");
        if (index !== -1) {
            args.splice(index, 1);
        }
    }
    return originalSpawn.call(this, command, args, options);
};
function exceptionDetailsToString(e) {
    return `${e.url}:${e.lineNumber}:${e.columnNumber} ${e.text} ${e.exception ? e.exception.description : ""}\n${e.stackTrace ? e.stackTrace.description : ""}\n  ${e.stackTrace ? e.stackTrace.callFrames.filter((f) => f.url !== "").map((f) => `${f.functionName ? `${f.functionName} at ` : ""}${f.url}:${f.lineNumber}:${f.columnNumber}`).join("\n  ") : ""}\n`;
}
/**
 * Spawns a chrome instance with a tmp user data and the debugger open to an ephemeral port
 */
function spawnChromeBrowser(session, headless, width, height) {
    const additionalChromeArgs = [`--proxy-server=127.0.0.1:8080`, `--disable-background-timer-throttling`, `--disable-renderer-backgrounding`, `--disable-renderer-priority-management`];
    if (headless) {
        // --disable-gpu required for Windows
        additionalChromeArgs.push(`--headless`, `--disable-gpu`);
    }
    const baseOptions = {
        // additionalArguments: ['--headless'],
        windowSize: { width: width, height: height },
        additionalArguments: additionalChromeArgs
    };
    switch (os_1.platform()) {
        case 'darwin':
            return session.spawnBrowser("system", baseOptions);
        case 'freebsd':
        case 'linux':
        case 'openbsd': {
            // *nix; need to find the exact path to Chrome / Chromium
            // .trim() removes trailing newline from `which` output.
            let chromePath = childProcess.execSync(`which google-chrome`).toString().trim();
            if (chromePath === "") {
                // Try Chromium
                chromePath = childProcess.execSync(`which chromium`).toString().trim();
            }
            if (chromePath === "") {
                return Promise.reject(`Unable to find a Google Chrome or Chromium installation.`);
            }
            return session.spawnBrowser("exact", Object.assign({
                executablePath: chromePath
            }, baseOptions));
        }
        case 'win32': {
            // Inspired by karma-chrome-launcher
            // https://github.com/karma-runner/karma-chrome-launcher/blob/master/index.js
            const suffix = `\\Google\\Chrome\\Application\\chrome.exe`;
            const prefixes = [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env['PROGRAMFILES(X86)']];
            for (const prefix of prefixes) {
                try {
                    let chromeLocation = path_1.join(prefix, suffix);
                    fs_1.accessSync(chromeLocation);
                    return session.spawnBrowser("exact", Object.assign({
                        executablePath: chromeLocation
                    }, baseOptions));
                }
                catch (e) { }
            }
            return Promise.reject(`Unable to find a Chrome installation`);
        }
        default:
            // Esoteric options
            return Promise.reject(`Unsupported platform: ${os_1.platform()}`);
    }
}
class ChromeDriver {
    constructor(log, headless, width, height, interceptPaths, quiet, mitmProxy, process, page, runtime, heapProfiler, console) {
        this._loadedFrames = new Set();
        this._shutdown = false;
        this._log = log;
        this._headless = headless;
        this.mitmProxy = mitmProxy;
        this._process = process;
        this._runtime = runtime;
        this._page = page;
        this._heapProfiler = heapProfiler;
        this._console = console;
        this._width = width;
        this._height = height;
        this._interceptPaths = interceptPaths;
        this._quiet = quiet;
        this._console.messageAdded = (evt) => {
            const m = evt.message;
            log.debug(`[${m.level}] [${m.source}] ${m.url}:${m.line}:${m.column} ${m.text}`);
        };
        this._runtime.exceptionThrown = (evt) => {
            const e = evt.exceptionDetails;
            log.error(exceptionDetailsToString(e));
        };
        this._page.frameStoppedLoading = (e) => {
            this._loadedFrames.add(e.frameId);
        };
    }
    static async Launch(log, headless, width, height, interceptPaths = [], quiet = true) {
        const mitmProxy = await mitmproxy_1.default.Create(undefined, interceptPaths, quiet);
        // Tell mitmProxy to stash data requested through the proxy.
        mitmProxy.stashEnabled = true;
        const session = await new Promise((res, rej) => chrome_debugging_client_1.createSession(res));
        let chromeProcess = await spawnChromeBrowser(session, headless, width, height);
        // open the REST API for tabs
        const client = session.createAPIClient("localhost", chromeProcess.remoteDebuggingPort);
        const tabs = await client.listTabs();
        const tab = tabs[0];
        await client.activateTab(tab.id);
        // open the debugger protocol
        // https://chromedevtools.github.io/devtools-protocol/
        const debugClient = await session.openDebuggingProtocol(tab.webSocketDebuggerUrl);
        const heapProfiler = new tot_1.HeapProfiler(debugClient);
        const network = new tot_1.Network(debugClient);
        const chromeConsole = new tot_1.Console(debugClient);
        const page = new tot_1.Page(debugClient);
        const runtime = new tot_1.Runtime(debugClient);
        const dom = new tot_1.DOM(debugClient);
        await Promise.all([heapProfiler.enable(), network.enable({}), chromeConsole.enable(), page.enable(), runtime.enable(), dom.enable()]);
        // Intercept network requests.
        // await network.setRequestInterceptionEnabled({ enabled: true });
        // Disable cache
        await network.setCacheDisabled({ cacheDisabled: true });
        // Disable service workers
        await network.setBypassServiceWorker({ bypass: true });
        const driver = new ChromeDriver(log, headless, width, height, interceptPaths, quiet, mitmProxy, chromeProcess, page, runtime, heapProfiler, chromeConsole);
        return driver;
    }
    async takeScreenshot() {
        const ss = await this._page.captureScreenshot({});
        return Buffer.from(ss.data, 'base64');
    }
    async relaunch() {
        await this.shutdown();
        const driver = await ChromeDriver.Launch(this._log, this._headless, this._width, this._height, this._interceptPaths, this._quiet);
        driver.mitmProxy.cb = this.mitmProxy.cb;
        return driver;
    }
    async navigateTo(url) {
        this._loadedFrames.clear();
        const f = await this._page.navigate({ url });
        while (!this._loadedFrames.has(f.frameId)) {
            if (this._shutdown) {
                return Promise.reject(`Cannot navigate to URL; Chrome has shut down.`);
            }
            await util_1.wait(5);
        }
    }
    async runCode(expression) {
        const e = await this._runtime.evaluate({ expression, returnByValue: true });
        this._log.debug(`${expression} => ${JSON.stringify(e.result.value)}`);
        if (e.exceptionDetails) {
            return Promise.reject(exceptionDetailsToString(e.exceptionDetails));
        }
        return e.result.value;
    }
    takeHeapSnapshot() {
        const parser = new heap_snapshot_parser_1.default();
        // 200 KB chunks
        this._heapProfiler.addHeapSnapshotChunk = (evt) => {
            parser.addSnapshotChunk(evt.chunk);
        };
        // Always take a DOM snapshot before taking a real snapshot.
        this._takeDOMSnapshot().then(() => {
            this._heapProfiler.takeHeapSnapshot({ reportProgress: false });
        });
        return parser;
    }
    async _takeDOMSnapshot() {
        const response = await this._runtime.evaluate({
            expression: "$$$SERIALIZE_DOM$$$()", returnByValue: true
        });
        return response.result.value;
    }
    async debugLoop() {
        const evalJavascript = (cmd, context, filename, callback) => {
            try {
                esprima_1.parse(cmd);
                this.runCode(cmd).then((result) => {
                    callback(null, `${result}`);
                }).catch(callback);
            }
            catch (e) {
                callback(new repl.Recoverable(e));
            }
        };
        return new Promise((resolve, reject) => {
            const r = repl.start({ prompt: "> ", eval: evalJavascript });
            r.on('exit', resolve);
        });
    }
    async shutdown() {
        this._shutdown = true;
        await Promise.all([this._process.dispose(), this.mitmProxy.shutdown()]);
    }
}
exports.default = ChromeDriver;
//# sourceMappingURL=data:application/json;base64,