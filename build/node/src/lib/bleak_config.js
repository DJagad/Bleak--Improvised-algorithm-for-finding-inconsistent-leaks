"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_CONFIG = {
    iterations: 8,
    rankingEvaluationIterations: 10,
    rankingEvaluationRuns: 5,
    url: "http://localhost:8080/",
    fixedLeaks: [],
    fixMap: {},
    login: [],
    setup: [],
    loop: [],
    postCheckSleep: 1000,
    postNextSleep: 0,
    postLoginSleep: 5000,
    timeout: 10 * 60 * 1000,
    rewrite: (url, type, data, fixes) => data
};
const DEFAULT_CONFIG_STRING = JSON.stringify(DEFAULT_CONFIG);
function getConfigFromSource(configSource) {
    const m = { exports: {} };
    // CommonJS emulation
    try {
        const exportsObj = new Function('exports', 'module', `${configSource}\nreturn module.exports ? module.exports : exports;`)(m.exports, m);
        return Object.assign({}, DEFAULT_CONFIG, exportsObj);
    }
    catch (e) {
        throw new Error(`Unable to run configuration file: ${e}`);
    }
}
function checkFunction(prop, data) {
    if (typeof (data) !== 'function') {
        throw new Error(`config.${prop} is not a function!`);
    }
}
function checkStep(type, i, data) {
    checkFunction(`${type}[${i}].check`, data.check);
    checkFunction(`${type}[${i}].next`, data.next);
}
function checkNumber(prop, data) {
    if (typeof (data) !== 'number') {
        throw new Error(`config.${prop} is not a number!`);
    }
}
function checkString(prop, data) {
    if (typeof (data) !== 'string') {
        throw new Error(`config.${prop} is not a string!`);
    }
}
class BLeakConfig {
    constructor(raw, _configSource) {
        this._configSource = _configSource;
        this.url = raw.url;
        this.loop = raw.loop;
        this.iterations = raw.iterations;
        this.rankingEvaluationIterations = raw.rankingEvaluationIterations;
        this.rankingEvaluationRuns = raw.rankingEvaluationRuns;
        this.fixedLeaks = raw.fixedLeaks;
        this.fixMap = raw.fixMap;
        this.login = raw.login;
        this.setup = raw.setup;
        this.timeout = raw.timeout;
        this.rewrite = raw.rewrite;
        this.postCheckSleep = raw.postCheckSleep;
        this.postNextSleep = raw.postNextSleep;
        this.postLoginSleep = raw.postLoginSleep;
    }
    static FromSource(configSource) {
        const raw = getConfigFromSource(configSource);
        // Sanity check types.
        checkString('url', raw.url);
        raw.loop.forEach((s, i) => checkStep('loop', i, s));
        checkNumber('iterations', raw.iterations);
        checkNumber('rankingEvaluationIterations', raw.rankingEvaluationIterations);
        checkNumber('rankingEvaluationRuns', raw.rankingEvaluationRuns);
        raw.fixedLeaks.forEach((n, i) => checkNumber(`fixedLeaks[${i}]`, n));
        raw.login.forEach((s, i) => checkStep('login', i, s));
        raw.setup.forEach((s, i) => checkStep('setup', i, s));
        checkNumber('timeout', raw.timeout);
        checkFunction('rewrite', raw.rewrite);
        checkNumber('postCheckSleep', raw.postCheckSleep);
        checkNumber('postNextSleep', raw.postNextSleep);
        checkNumber('postLoginSleep', raw.postLoginSleep);
        return new BLeakConfig(raw, configSource);
    }
    getBrowserInjection() {
        // CommonJS emulation
        return `(function() {
  var module = { exports: {} };
  var exports = module.exports;
  ${this._configSource}
  window.BLeakConfig = Object.assign({}, ${DEFAULT_CONFIG_STRING}, module.exports ? module.exports : exports);
})();`;
    }
}
exports.default = BLeakConfig;
//# sourceMappingURL=data:application/json;base64,