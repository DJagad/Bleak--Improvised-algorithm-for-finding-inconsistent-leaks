"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const htmlparser2_1 = require("htmlparser2");
var closure_state_transform_1 = require("./closure_state_transform");
exports.exposeClosureState = closure_state_transform_1.exposeClosureState;
exports.ensureES5 = closure_state_transform_1.ensureES5;
exports.nopTransform = closure_state_transform_1.nopTransform;
const HTML_PARSER_OPTS = { lowerCaseTags: false, lowerCaseAttributeNames: false };
function parseHTML(source) {
    let rv;
    let err;
    const dom = new htmlparser2_1.DomHandler((e, nodes) => {
        rv = nodes;
        err = e;
    });
    const parser = new htmlparser2_1.Parser(dom, HTML_PARSER_OPTS);
    parser.write(source);
    parser.end();
    if (err) {
        return null;
    }
    return rv;
}
exports.parseHTML = parseHTML;
function identJSTransform(f, s) {
    return s;
}
/**
 * Inject the injection string into the <head> portion of the HTML source.
 *
 * If <head> is missing, attempts to inject after the <html> tag.
 *
 * @param filename Path to the HTML file.
 * @param source Source of an HTML file.
 * @param injection Content to inject into the head.
 */
function injectIntoHead(filename, source, injection, jsTransform = identJSTransform) {
    const parsedHTML = parseHTML(source);
    if (parsedHTML === null) {
        // Parsing failed.
        return source;
    }
    let htmlNode;
    let headNode;
    let inlineScripts = [];
    function search(n) {
        // Traverse children first to avoid mutating state
        // before it is traversed.
        if (n.children) {
            n.children.forEach(search);
        }
        if (n.name) {
            switch (n.name.toLowerCase()) {
                case 'head':
                    if (!headNode) {
                        headNode = n;
                    }
                    break;
                case 'html':
                    if (!htmlNode) {
                        htmlNode = n;
                    }
                    break;
                case 'script':
                    const attribs = Object.keys(n.attribs);
                    const attribsLower = attribs.map((s) => s.toLowerCase());
                    if (n.attribs && attribsLower.indexOf("src") === -1) {
                        const typeIndex = attribsLower.indexOf("type");
                        if (typeIndex !== -1) {
                            const type = n.attribs[attribs[typeIndex]].toLowerCase();
                            switch (type) {
                                case 'application/javascript':
                                case 'text/javascript':
                                case 'text/x-javascript':
                                case 'text/x-javascript':
                                    break;
                                default:
                                    // IGNORE non-JS script tags.
                                    // These are used for things like templates.
                                    return;
                            }
                        }
                        inlineScripts.push(n);
                    }
                    break;
            }
        }
    }
    parsedHTML.forEach(search);
    if (headNode || htmlNode) {
        const injectionTarget = headNode ? headNode : htmlNode;
        if (!injectionTarget.children) {
            injectionTarget.children = [];
        }
        injectionTarget.children = injection.concat(injectionTarget.children);
    }
    else {
        // AngularJS??
        return source;
    }
    inlineScripts.forEach((n, i) => {
        if (!n.children || n.children.length !== 1) {
            console.log(`Weird! Found JS node with the following children: ${JSON.stringify(n.children)}`);
        }
        n.children[0].data = jsTransform(`${filename}-inline${i}.js`, n.children[0].data);
    });
    return htmlparser2_1.DomUtils.getOuterHTML(parsedHTML);
}
exports.injectIntoHead = injectIntoHead;
//# sourceMappingURL=data:application/json;base64,