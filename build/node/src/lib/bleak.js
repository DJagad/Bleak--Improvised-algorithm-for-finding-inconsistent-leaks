"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bleak_config_1 = require("./bleak_config");
const bleak_operations_1 = require("./bleak_operations");
function defaultSnapshotCb() {
    return Promise.resolve();
}
class BLeakDetector {
    /**
     * Find leaks in an application.
     * @param configSource The source code of the configuration file as a CommonJS module.
     * @param progressBar A progress bar, to which BLeak will print information about its progress.
     * @param driver The Chrome driver.
     */
    static async FindLeaks(configSource, progressBar, driver, snapshotCb = defaultSnapshotCb, bleakResults) {
        const detector = new BLeakDetector(driver, progressBar, configSource, snapshotCb);
        return detector.findAndDiagnoseLeaks(bleakResults);
    }
    /**
     * Evaluate the effectiveness of leak fixes applied in order using different metrics.
     * Runs the application without any of the fixes, and then with each fix in successive order using
     * different metrics. Mutates the BLeakResults object with the data, and calls a callback
     * periodically to flush it to disk. Intelligently resumes from a partially-completed
     * evaluation run.
     * @param configSource The source code of the configuration file as a CommonJS module.
     * @param progressBar A progress bar, to which BLeak will print information about its progress.
     * @param driver The browser driver.
     * @param results The results file from a BLeak run.
     * @param flushResults Called when the results file should be flushed to disk.
     * @param snapshotCb (Optional) Snapshot callback.
     */
    static async EvaluateRankingMetrics(configSource, progressBar, driver, results, flushResults, snapshotCb = defaultSnapshotCb) {
        const detector = new BLeakDetector(driver, progressBar, configSource);
        return detector.evaluateRankingMetrics(results, flushResults, snapshotCb);
        ;
    }
    constructor(driver, progressBar, configSource, snapshotCb = defaultSnapshotCb) {
        this._driver = driver;
        this._progressBar = progressBar;
        this._config = bleak_config_1.default.FromSource(configSource);
        this._snapshotCb = snapshotCb;
    }
    /**
     * Locates memory leaks on the page and diagnoses them. This is the end-to-end
     * BLeak algorithm.
     */
    async findAndDiagnoseLeaks(bleakResults) {
        const op = new bleak_operations_1.FindAndDiagnoseLeaks(this._config, this._snapshotCb);
        this._progressBar.setOperationCount(op.size());
        const os = new bleak_operations_1.OperationState(this._driver, this._progressBar, this._config);
        if (bleakResults) {
            os.results = bleakResults;
        }
        await op.run(os);
        return os.results;
    }
    /**
     * Given a BLeak results file, collects the information needed to evaluate the effectiveness of various metrics.
     * @param results BLeak results file from a BLeak run.
     * @param flushResults Callback that flushes the results file to disk. Called periodically when new results are added.
     * @param snapshotCb Optional callback that is called whenever a heap snapshot is taken.
     */
    async evaluateRankingMetrics(results, flushResults, snapshotCb) {
        const op = new bleak_operations_1.EvaluateRankingMetricsOperation(this._config, results, flushResults, snapshotCb);
        this._progressBar.setOperationCount(op.size());
        const os = new bleak_operations_1.OperationState(this._driver, this._progressBar, this._config);
        os.results = results;
        return op.run(os);
    }
}
exports.BLeakDetector = BLeakDetector;
exports.default = BLeakDetector;
//# sourceMappingURL=data:application/json;base64,