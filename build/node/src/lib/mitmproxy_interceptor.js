"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transformations_1 = require("./transformations");
const fs_1 = require("fs");
function identJSTransform(f, s) {
    return s;
}
function defaultRewrite(url, type, data) {
    return data;
}
exports.DEFAULT_AGENT_PATH = require.resolve('../lib/bleak_agent');
exports.DEFAULT_AGENT_URL = `/bleak_agent.js`;
exports.DEFAULT_AGENT_TRANSFORM_PATH = require.resolve('../lib/bleak_agent_transform');
exports.DEFAULT_AGENT_TRANSFORM_URL = `/bleak_agent_transform.js`;
exports.DEFAULT_BABEL_POLYFILL_URL = `/bleak_polyfill.js`;
exports.DEFAULT_BABEL_POLYFILL_PATH = require.resolve('babel-polyfill/dist/polyfill');
const DEFAULT_VALUES = {
    agentPath: exports.DEFAULT_AGENT_PATH,
    agentUrl: exports.DEFAULT_AGENT_URL,
    polyfillUrl: exports.DEFAULT_BABEL_POLYFILL_URL,
    polyfillPath: exports.DEFAULT_BABEL_POLYFILL_PATH,
    config: "",
    fixes: new Array(),
    disableAllRewrites: false,
    fixRewriteFunction: defaultRewrite
};
/**
 * Retrieve a standard BLeak interceptor.
 */
function getInterceptor(config) {
    config = Object.assign({}, DEFAULT_VALUES, config);
    const agentTransformURL = exports.DEFAULT_AGENT_TRANSFORM_URL;
    const agentTransformPath = exports.DEFAULT_AGENT_TRANSFORM_PATH;
    const parsedInjection = transformations_1.parseHTML(`<script type="text/javascript" src="${config.agentUrl}"></script>
  <script type="text/javascript" src="${agentTransformURL}"></script>
    <script type="text/javascript">
      ${JSON.stringify(config.fixes)}.forEach(function(num) {
        $$$SHOULDFIX$$$(num, true);
      });
      ${config.config}
    </script>
    ${config.disableAllRewrites ? '' : `<script type="text/javascript" src="${config.polyfillUrl}"></script>
    <script type="text/javascript">
      // Babel defines a 'global' variable that trips up some applications' environment detection.
      if (typeof(global) !== "undefined") { delete window['global']; }
    </script>`}`);
    const agentData = fs_1.readFileSync(config.agentPath);
    const agentTransformData = fs_1.readFileSync(agentTransformPath);
    const polyfillData = fs_1.readFileSync(config.polyfillPath);
    return (f) => {
        const response = f.response;
        const request = f.request;
        const method = f.request.method;
        const url = request.url;
        // Filter out non 'GET' requests
        if (method !== 'get') {
            if (method === 'post' && url.path === "/eval") {
                // Special eval handler!
                response.statusCode = 200;
                response.clearHeaders();
                const body = JSON.parse(f.requestBody.toString());
                if (config.rewrite) {
                    f.setResponseBody(Buffer.from(transformations_1.exposeClosureState(`eval-${Math.random()}.js`, body.source, config.agentUrl, config.polyfillUrl, body.scope), 'utf8'));
                }
                else if (!config.disableAllRewrites) {
                    f.setResponseBody(Buffer.from(transformations_1.ensureES5(`eval-${Math.random()}.js`, body.source, config.agentUrl, config.polyfillUrl, body.scope), 'utf8'));
                }
                else {
                    f.setResponseBody(Buffer.from(body.source, 'utf8'));
                }
                response.setHeader('content-type', 'text/javascript');
            }
            return;
        }
        // GET requests
        let mime = response.getHeader('content-type');
        if (mime.indexOf(";") !== -1) {
            mime = mime.slice(0, mime.indexOf(";"));
        }
        // console.log(`[${response.statusCode}] ${request.rawUrl}: ${mime}`);
        // NOTE: Use `pathname`, as it cuts out query variables that may have been tacked on.
        switch (url.pathname.toLowerCase()) {
            case config.agentUrl:
                response.statusCode = 200;
                response.clearHeaders();
                f.setResponseBody(agentData);
                response.setHeader('content-type', 'text/javascript');
                return;
            case agentTransformURL:
                response.statusCode = 200;
                response.clearHeaders();
                if (config.rewrite) {
                    f.setResponseBody(Buffer.from(transformations_1.exposeClosureState(url.pathname, agentTransformData.toString("utf8"), config.agentUrl, config.polyfillUrl), 'utf8'));
                }
                else {
                    f.setResponseBody(agentTransformData);
                }
                response.setHeader('content-type', 'text/javascript');
                return;
            case config.polyfillUrl:
                response.statusCode = 200;
                response.clearHeaders();
                f.setResponseBody(polyfillData);
                response.setHeader('content-type', 'text/javascript');
                return;
        }
        if (response.statusCode === 200) {
            // Rewrite before anything else happens.
            f.setResponseBody(config.fixRewriteFunction(request.rawUrl, mime, f.responseBody, config.fixes));
        }
        switch (mime) {
            case 'text/html':
                //if (f.status === 200) {
                f.setResponseBody(Buffer.from(transformations_1.injectIntoHead(url.pathname, f.responseBody.toString("utf8"), parsedInjection, config.rewrite ? transformations_1.exposeClosureState : identJSTransform), 'utf8'));
                //}
                break;
            case 'text/javascript':
            case 'application/javascript':
            case 'text/x-javascript':
            case 'application/x-javascript':
                if (response.statusCode === 200) {
                    if (config.rewrite) {
                        config.log.debug(`Rewriting ${request.rawUrl}...`);
                        f.setResponseBody(Buffer.from(transformations_1.exposeClosureState(url.pathname, f.responseBody.toString("utf8"), config.agentUrl, config.polyfillUrl), 'utf8'));
                    }
                    else if (!config.disableAllRewrites) {
                        config.log.debug(`ES5ing ${request.rawUrl}...`);
                        f.setResponseBody(Buffer.from(transformations_1.ensureES5(url.pathname, f.responseBody.toString("utf8"), config.agentUrl, config.polyfillUrl), 'utf8'));
                    }
                }
                break;
        }
    };
}
exports.default = getInterceptor;
//# sourceMappingURL=data:application/json;base64,