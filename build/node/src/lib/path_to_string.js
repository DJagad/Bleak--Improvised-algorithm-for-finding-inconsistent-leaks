"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const r = /'/g;
/**
 * Escapes single quotes in the given string.
 * @param s
 */
function safeString(s) {
    return s.replace(r, "\\'");
}
// From https://stackoverflow.com/a/2008444
// This is not *perfect*, but it's good enough for human output.
const JS_IDENTIFIER_REGEXP = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
/**
 * Returns true if the property definitely requires array notation.
 * This check is not sound, as we do not check for JavaScript reserved
 * words. However, it is 'good enough' for human output, e.g. in a report.
 * @param prop
 */
function propertyNeedsArrayNotation(prop) {
    return !JS_IDENTIFIER_REGEXP.test(`${prop}`);
}
function propertyAccessString(s) {
    if (typeof (s) === "number") {
        return `[${s}]`;
    }
    else if (propertyNeedsArrayNotation(s)) {
        return `["${safeString(s)}"]`;
    }
    else {
        return `.${s}`;
    }
}
function prettyPrintDOMPath() {
    while (PS.nonempty()) {
        const segment = PS.pop();
        const name = segment.indexOrName;
        if (name === "root") {
            // Ignore this BLeak-inserted edge.
            // We're transitioning to a path outside of the DOM, on the DOM object itself.
            prettyPrintNonDOMPath();
        }
        else if (name === 'childNodes') {
            PS.print(propertyAccessString(name));
        }
        else {
            // $$$CHILD$$$n => n
            const idx = parseInt(name.slice(11), 10);
            // Should alternate between 'childNode' and indices until it gets to 'root'.
            PS.print(propertyAccessString(idx));
        }
    }
}
function prettyPrintNonDOMPath() {
    while (PS.nonempty()) {
        const segment = PS.pop();
        switch (segment.type) {
            case 5 /* EVENT_LISTENER_LIST */: {
                // Will either be:
                // - A leak on the list itself.
                // - A leak *within* an event listener.
                // Seek forward to figure out which, and print appropriately
                // $$listeners.type[index].listener
                const typeSegment = PS.pop();
                if (!PS.nonempty()) {
                    // List leak
                    PS.pushString();
                    PS.print(`List of '${typeSegment.indexOrName}' listeners on`);
                    PS.pushString();
                }
                else {
                    const indexSegment = PS.pop();
                    PS.pop(); // Should be the '.listener' property, unless the application mucked with our metadata.
                    PS.pushString();
                    PS.print(`on listener ${indexSegment.indexOrName} in the list of '${typeSegment.indexOrName}' listeners on`);
                    PS.pushString();
                }
                break;
            }
            case 3 /* CLOSURE */:
                PS.pushString();
                PS.print("within closure of");
                PS.pushString();
                break;
            case 4 /* CLOSURE_VARIABLE */:
                // Should've been preceded by CLOSURE.
                // Begins a new path in the string.
                PS.print(segment.indexOrName);
                break;
            default: {
                let indexOrName = segment.indexOrName;
                if (typeof (indexOrName) === "string" && indexOrName.startsWith("$$$on")) {
                    // Cut off the $$$. This is a mirrored event listener property.
                    indexOrName = indexOrName.slice(3);
                }
                // *Must* be a property on the previously-printed object.
                PS.print(propertyAccessString(indexOrName));
                break;
            }
        }
    }
}
class PathStream {
    constructor() {
        this._p = null;
        this._i = -1;
        this._s = null;
        this._ss = null;
    }
    print(s) {
        if (this._s !== null) {
            this._s += s;
        }
    }
    pushString() {
        if (this._ss !== null) {
            this._ss.push(this._s);
            this._s = "";
        }
    }
    flush() {
        const s = this._s;
        const ss = this._ss;
        this._ss = this._s = null;
        ss.push(s);
        return ss.filter((s) => s !== "").reverse().join(" ");
    }
    setPath(p) {
        this._p = p;
        this._i = 0;
        this._s = "";
        this._ss = [];
    }
    advance() {
        this._i++;
    }
    peek() {
        if (this.nonempty()) {
            return this._p[this._i];
        }
        else {
            return null;
        }
    }
    pop() {
        const rv = this.peek();
        this.advance();
        return rv;
    }
    nonempty() {
        return this._p && this._p.length > this._i;
    }
}
// Singleton class.
const PS = new PathStream();
/**
 * Pretty print a path as a human-friendly string.
 * @param p
 */
function pathToString(p) {
    PS.setPath(p);
    const segment = PS.peek();
    if (segment.type === 6 /* DOM_TREE */) {
        PS.print("document");
        PS.advance();
        prettyPrintDOMPath();
    }
    else {
        PS.print("window");
        prettyPrintNonDOMPath();
    }
    return PS.flush();
}
exports.default = pathToString;
//# sourceMappingURL=data:application/json;base64,