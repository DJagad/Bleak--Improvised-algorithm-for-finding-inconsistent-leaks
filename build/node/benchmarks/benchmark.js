"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Benchmark = require("benchmark");
const zlib_1 = require("zlib");
const fs_1 = require("fs");
const path_1 = require("path");
const growth_graph_1 = require("../src/lib/growth_graph");
const transformations_1 = require("../src/lib/transformations");
const heap_snapshot_parser_1 = require("../src/lib/heap_snapshot_parser");
const skipSnapshots = process.argv.indexOf("--skip-snapshots") !== -1;
let loomioSnapshots = [];
let piwikSnapshots = [];
let loomioJs = null;
let piwikJs = null;
const suite = new Benchmark.Suite('BLeak');
const snapshotDir = './benchmarks/snapshots';
const jsDir = './benchmarks/javascript';
const reportFilename = `./benchmarks/benchmark_report_${new Date().toISOString().replace(/:/g, '_')}.log`;
const benchmarkReport = fs_1.createWriteStream(reportFilename);
console.log(`Writing report to ${reportFilename}`);
if (skipSnapshots) {
    console.log("Skipping snapshots.");
}
function getSnapshots(prefix) {
    return fs_1.readdirSync(snapshotDir)
        .filter((s) => s.startsWith(prefix))
        .map((s) => path_1.join(snapshotDir, s))
        .map(gunzipFile);
}
function getJavascript(file) {
    return gunzipFile(path_1.join(jsDir, file));
}
function gunzipFile(file) {
    return zlib_1.gunzipSync(fs_1.readFileSync(file)).toString("utf8");
}
async function getGrowthPaths(snapshots) {
    const builder = new growth_graph_1.HeapGrowthTracker();
    for (const snapshot of snapshots) {
        await builder.addSnapshot(heap_snapshot_parser_1.default.FromString(snapshot));
    }
    return builder.findLeakPaths();
}
async function getHeapSize(snapshot) {
    const graph = await growth_graph_1.HeapGraph.Construct(heap_snapshot_parser_1.default.FromString(snapshot));
    return graph.calculateSize();
}
if (!skipSnapshots) {
    suite
        .add("Loomio: Growth Paths", {
        fn: function (deferred) {
            getGrowthPaths(loomioSnapshots).then(() => deferred.resolve());
        },
        onStart: () => {
            loomioSnapshots = getSnapshots("loomio");
        },
        defer: true
    })
        .add("Loomio: Heap Size", {
        fn: function (deferred) {
            Promise.all(loomioSnapshots.map(getHeapSize)).then(() => deferred.resolve());
        },
        onComplete: () => {
            loomioSnapshots = [];
        },
        defer: true
    })
        .add("Piwik: Growth Paths", {
        fn: function (deferred) {
            getGrowthPaths(piwikSnapshots).then(() => deferred.resolve());
        },
        onStart: () => {
            piwikSnapshots = getSnapshots("piwik");
        },
        defer: true
    })
        .add("Piwik: Heap Size", {
        fn: function (deferred) {
            Promise.all(piwikSnapshots.map(getHeapSize)).then(() => deferred.resolve());
        },
        onComplete: () => {
            piwikSnapshots = [];
        },
        defer: true
    });
}
suite.add("Loomio: Expose Closure State", function () {
    transformations_1.exposeClosureState('loomio_vendor.js', loomioJs);
}, {
    onStart: () => {
        loomioJs = getJavascript('loomio_vendor.js.gz');
    },
    onComplete: () => {
        loomioJs = null;
    },
    defer: false
})
    .add("Piwik: Expose Closure State", function () {
    transformations_1.exposeClosureState('piwik_app.js', piwikJs);
}, {
    onStart: () => {
        piwikJs = getJavascript('piwik_app.js.gz');
    },
    onComplete: () => {
        piwikJs = null;
    },
    defer: false
})
    .on('cycle', function (event) {
    const str = String(event.target);
    console.log(str);
    benchmarkReport.write(str + "\n");
})
    .on('complete', function () {
    benchmarkReport.end();
})
    .on('error', function (e) {
    console.log("Received error!");
    console.log(e);
});
suite.run();
//# sourceMappingURL=data:application/json;base64,