"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
function sendResponse(res, testFile) {
    res.statusCode = 200;
    res.setHeader('content-type', testFile.mimeType);
    if (testFile.headers) {
        Object.keys(testFile.headers).forEach((k) => {
            res.setHeader(k, testFile.headers[k]);
        });
    }
    res.write(testFile.data);
    res.end();
}
/**
 * Creates a test HTTP server that serves up static in-memory "files".
 * @param files Map from server path to file data.
 * @param port Port to listen on for HTTP requests.
 */
function createSimpleServer(files, port) {
    return new Promise((res, rej) => {
        // Start test HTTP server + proxy.
        const httpServer = http_1.createServer(function (req, res) {
            const url = req.url.toLowerCase();
            const testFile = files[url] || files['/'];
            if (testFile) {
                sendResponse(res, testFile);
            }
            else {
                res.statusCode = 404;
                res.end();
            }
        });
        httpServer.listen(port, (e) => {
            if (e) {
                rej(e);
            }
            else {
                res(httpServer);
            }
        });
    });
}
exports.default = createSimpleServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cF9zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3V0aWwvaHR0cF9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBNEY7QUFRNUYsc0JBQXNCLEdBQW1CLEVBQUUsUUFBa0I7SUFDM0QsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFDckIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILDRCQUEyQyxLQUFpQyxFQUFFLElBQVk7SUFDeEYsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzFDLGtDQUFrQztRQUNsQyxNQUFNLFVBQVUsR0FBRyxtQkFBZ0IsQ0FBQyxVQUFTLEdBQUcsRUFBRSxHQUFHO1lBQ25ELE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNiLFlBQVksQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDOUIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO2dCQUNyQixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDWixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ1IsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFyQkQscUNBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVTZXJ2ZXIgYXMgY3JlYXRlSFRUUFNlcnZlciwgU2VydmVyIGFzIEhUVFBTZXJ2ZXIsIFNlcnZlclJlc3BvbnNlfSBmcm9tICdodHRwJztcblxuZXhwb3J0IGludGVyZmFjZSBUZXN0RmlsZSB7XG4gIG1pbWVUeXBlOiBzdHJpbmc7XG4gIGRhdGE6IEJ1ZmZlcjtcbiAgaGVhZGVycz86IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbn1cblxuZnVuY3Rpb24gc2VuZFJlc3BvbnNlKHJlczogU2VydmVyUmVzcG9uc2UsIHRlc3RGaWxlOiBUZXN0RmlsZSk6IHZvaWQge1xuICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC10eXBlJywgdGVzdEZpbGUubWltZVR5cGUpO1xuICBpZiAodGVzdEZpbGUuaGVhZGVycykge1xuICAgIE9iamVjdC5rZXlzKHRlc3RGaWxlLmhlYWRlcnMpLmZvckVhY2goKGspID0+IHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoaywgdGVzdEZpbGUuaGVhZGVyc1trXSk7XG4gICAgfSk7XG4gIH1cbiAgcmVzLndyaXRlKHRlc3RGaWxlLmRhdGEpO1xuICByZXMuZW5kKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRlc3QgSFRUUCBzZXJ2ZXIgdGhhdCBzZXJ2ZXMgdXAgc3RhdGljIGluLW1lbW9yeSBcImZpbGVzXCIuXG4gKiBAcGFyYW0gZmlsZXMgTWFwIGZyb20gc2VydmVyIHBhdGggdG8gZmlsZSBkYXRhLlxuICogQHBhcmFtIHBvcnQgUG9ydCB0byBsaXN0ZW4gb24gZm9yIEhUVFAgcmVxdWVzdHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNpbXBsZVNlcnZlcihmaWxlczoge1twYXRoOiBzdHJpbmddOiBUZXN0RmlsZX0sIHBvcnQ6IG51bWJlcik6IFByb21pc2U8SFRUUFNlcnZlcj4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8SFRUUFNlcnZlcj4oKHJlcywgcmVqKSA9PiB7XG4gICAgLy8gU3RhcnQgdGVzdCBIVFRQIHNlcnZlciArIHByb3h5LlxuICAgIGNvbnN0IGh0dHBTZXJ2ZXIgPSBjcmVhdGVIVFRQU2VydmVyKGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG4gICAgICBjb25zdCB1cmwgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCB0ZXN0RmlsZSA9IGZpbGVzW3VybF0gfHwgZmlsZXNbJy8nXTtcbiAgICAgIGlmICh0ZXN0RmlsZSkge1xuICAgICAgICBzZW5kUmVzcG9uc2UocmVzLCB0ZXN0RmlsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwNDtcbiAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGh0dHBTZXJ2ZXIubGlzdGVuKHBvcnQsIChlOiBhbnkpID0+IHtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIHJlaihlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzKGh0dHBTZXJ2ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0iXX0=