"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stack_frame_1 = require("./stack_frame");
class StackFrameStats {
    constructor(
    // This stack frame's unique ID
    id, 
    // The LeakRoots that reference this stack frame
    leaks, 
    // The number of stacks that reference this stack frame
    count) {
        this.id = id;
        this.leaks = leaks;
        this.count = count;
    }
}
/**
 * Stores a set of stack traces associated with specific memory leaks.
 *
 * Supports:
 * - Looking up the leaks associated with a given source location
 * - Returning all of the stack frames located in a specific file
 * - Returning the stack traces associated with a specific leak
 */
class StackTraceManager {
    constructor(sfm, frames, _leaks) {
        this._leaks = _leaks;
        this._fileStackFrames = new Map();
        this._locationToId = new Map();
        this._frames = frames.map((f) => new stack_frame_1.default(sfm.getSourceFile(f[0]), f[3], f[1], f[2]));
        this._frameStats = this._frames.map((f, id) => new StackFrameStats(id, [], 0));
        this._leaks.forEach((l) => {
            l.stacks.forEach((s) => {
                for (const sf of s) {
                    const stats = this._frameStats[sf];
                    stats.count++;
                    if (stats.leaks.indexOf(l) === -1) {
                        stats.leaks.push(l);
                    }
                    const sfObj = this._frames[sf];
                    let fileStackFrames = this._fileStackFrames.get(sfObj.file);
                    if (!fileStackFrames) {
                        fileStackFrames = [];
                        this._fileStackFrames.set(sfObj.file, fileStackFrames);
                    }
                    // TODO: Could use a set, but these arrays are expected to be small.
                    if (fileStackFrames.indexOf(sf) === -1) {
                        fileStackFrames.push(sf);
                    }
                    this._locationToId.set(sfObj.key, sf);
                }
            });
        });
    }
    static FromBLeakResults(sourceFileManager, results) {
        return new StackTraceManager(sourceFileManager, results.stackFrames, results.leaks);
    }
    _getFrameForLocation(location) {
        return this._locationToId.get(location.key);
    }
    getLeaksForLocation(location) {
        const sfId = this._getFrameForLocation(location.getOriginalLocation());
        return this._frameStats[sfId].leaks;
    }
    getFramesForFile(file) {
        const fileInfo = this._fileStackFrames.get(file);
        if (!fileInfo) {
            return [];
        }
        // Filter out locations at invalid locations (0, -1, etc).
        return fileInfo.map((sf) => this._frames[sf]).filter((sf) => sf.line > 0 && sf.column > 0);
    }
    getTracesForLeak(l) {
        return l.stacks.map((s) => s.map((sf) => this._frames[sf]));
    }
    stackToFrames(s) {
        return s.map((s) => this._frames[s]);
    }
}
exports.default = StackTraceManager;
//# sourceMappingURL=data:application/json;base64,