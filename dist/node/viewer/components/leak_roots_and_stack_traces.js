"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const leak_root_list_1 = require("./leak_root_list");
class LeakRootsAndStackTracesComponent extends React.Component {
    constructor(props, c) {
        super(props, c);
        this.state = {
            rankBy: "leakShare"
        };
    }
    render() {
        return React.createElement("div", null,
            React.createElement("div", { className: "form-group row" },
                React.createElement("label", { "data-for": "staticEmail", className: "col-sm-2 col-form-label" }, "Rank By"),
                React.createElement("div", { className: "col-sm-10" },
                    React.createElement("select", { className: "form-control", onChange: (e) => { this.setState({ rankBy: e.target.options[e.target.options.selectedIndex].value }); } },
                        React.createElement("option", { value: "leakShare" }, "LeakShare"),
                        React.createElement("option", { value: "transitiveClosureSize" }, "Transitive Closure Size"),
                        React.createElement("option", { value: "retainedSize" }, "Retained Size"),
                        React.createElement("option", { value: "ownedObjects" }, "Uniquely Owned Objects")))),
            React.createElement(leak_root_list_1.default, { stackTraces: this.props.stackTraces, selectedLocation: this.props.selectedLocation, bleakResults: this.props.bleakResults, onStackFrameSelect: this.props.onStackFrameSelect, rankBy: this.state.rankBy }));
    }
}
exports.default = LeakRootsAndStackTracesComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVha19yb290c19hbmRfc3RhY2tfdHJhY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3ZpZXdlci9jb21wb25lbnRzL2xlYWtfcm9vdHNfYW5kX3N0YWNrX3RyYWNlcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFFL0IscURBQTRDO0FBZ0I1QyxzQ0FBc0QsU0FBUSxLQUFLLENBQUMsU0FBdUY7SUFDekosWUFBWSxLQUE0QyxFQUFFLENBQU87UUFDL0QsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1gsTUFBTSxFQUFFLFdBQVc7U0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNO1FBQ1gsTUFBTSxDQUFDO1lBQ0wsNkJBQUssU0FBUyxFQUFDLGdCQUFnQjtnQkFDN0IsMkNBQWdCLGFBQWEsRUFBQyxTQUFTLEVBQUMseUJBQXlCLGNBQWdCO2dCQUNqRiw2QkFBSyxTQUFTLEVBQUMsV0FBVztvQkFDeEIsZ0NBQVEsU0FBUyxFQUFDLGNBQWMsRUFBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBb0IsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDO3dCQUNwSixnQ0FBUSxLQUFLLEVBQUMsV0FBVyxnQkFBbUI7d0JBQzVDLGdDQUFRLEtBQUssRUFBQyx1QkFBdUIsOEJBQWlDO3dCQUN0RSxnQ0FBUSxLQUFLLEVBQUMsY0FBYyxvQkFBdUI7d0JBQ25ELGdDQUFRLEtBQUssRUFBQyxjQUFjLDZCQUFnQyxDQUNyRCxDQUNMLENBQ0Y7WUFDTixvQkFBQyx3QkFBWSxJQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBSSxDQUNyTixDQUFDO0lBQ1QsQ0FBQztDQUNGO0FBeEJELG1EQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCTGVha1Jlc3VsdHMgZnJvbSAnLi4vLi4vbGliL2JsZWFrX3Jlc3VsdHMnO1xuaW1wb3J0IExlYWtSb290TGlzdCBmcm9tICcuL2xlYWtfcm9vdF9saXN0JztcbmltcG9ydCBMb2NhdGlvbiBmcm9tICcuLi9tb2RlbC9sb2NhdGlvbic7XG5pbXBvcnQgU3RhY2tGcmFtZSBmcm9tICcuLi9tb2RlbC9zdGFja19mcmFtZSc7XG5pbXBvcnQgU3RhY2tUcmFjZU1hbmFnZXIgZnJvbSAnLi4vbW9kZWwvc3RhY2tfdHJhY2VfbWFuYWdlcic7XG5cbmludGVyZmFjZSBMZWFrUm9vdHNBbmRTdGFja1RyYWNlc0NvbXBvbmVudFByb3BzIHtcbiAgYmxlYWtSZXN1bHRzOiBCTGVha1Jlc3VsdHM7XG4gIG9uU3RhY2tGcmFtZVNlbGVjdDogKHNmOiBTdGFja0ZyYW1lKSA9PiB2b2lkO1xuICBzZWxlY3RlZExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgc3RhY2tUcmFjZXM6IFN0YWNrVHJhY2VNYW5hZ2VyO1xufVxuXG5pbnRlcmZhY2UgTGVha1Jvb3RzQW5kU3RhY2tUcmFjZXNDb21wb25lbnRTdGF0ZSB7XG4gIHJhbmtCeTogXCJ0cmFuc2l0aXZlQ2xvc3VyZVNpemVcIiB8IFwibGVha1NoYXJlXCIgfCBcInJldGFpbmVkU2l6ZVwiIHwgXCJvd25lZE9iamVjdHNcIjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGVha1Jvb3RzQW5kU3RhY2tUcmFjZXNDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TGVha1Jvb3RzQW5kU3RhY2tUcmFjZXNDb21wb25lbnRQcm9wcywgTGVha1Jvb3RzQW5kU3RhY2tUcmFjZXNDb21wb25lbnRTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogTGVha1Jvb3RzQW5kU3RhY2tUcmFjZXNDb21wb25lbnRQcm9wcywgYz86IGFueSkge1xuICAgIHN1cGVyKHByb3BzLCBjKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmFua0J5OiBcImxlYWtTaGFyZVwiXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICAgIDxsYWJlbCBkYXRhLWZvcj1cInN0YXRpY0VtYWlsXCIgY2xhc3NOYW1lPVwiY29sLXNtLTIgY29sLWZvcm0tbGFiZWxcIj5SYW5rIEJ5PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIG9uQ2hhbmdlPXsoZSkgPT4geyB0aGlzLnNldFN0YXRlKHsgcmFua0J5OiBlLnRhcmdldC5vcHRpb25zW2UudGFyZ2V0Lm9wdGlvbnMuc2VsZWN0ZWRJbmRleF0udmFsdWUgYXMgXCJsZWFrU2hhcmVcIiB9KSB9fT5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsZWFrU2hhcmVcIj5MZWFrU2hhcmU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ0cmFuc2l0aXZlQ2xvc3VyZVNpemVcIj5UcmFuc2l0aXZlIENsb3N1cmUgU2l6ZTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJldGFpbmVkU2l6ZVwiPlJldGFpbmVkIFNpemU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJvd25lZE9iamVjdHNcIj5VbmlxdWVseSBPd25lZCBPYmplY3RzPC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8TGVha1Jvb3RMaXN0IHN0YWNrVHJhY2VzPXt0aGlzLnByb3BzLnN0YWNrVHJhY2VzfSBzZWxlY3RlZExvY2F0aW9uPXt0aGlzLnByb3BzLnNlbGVjdGVkTG9jYXRpb259IGJsZWFrUmVzdWx0cz17dGhpcy5wcm9wcy5ibGVha1Jlc3VsdHN9IG9uU3RhY2tGcmFtZVNlbGVjdD17dGhpcy5wcm9wcy5vblN0YWNrRnJhbWVTZWxlY3R9IHJhbmtCeT17dGhpcy5zdGF0ZS5yYW5rQnl9IC8+XG4gICAgPC9kaXY+O1xuICB9XG59Il19