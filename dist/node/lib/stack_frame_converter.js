"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const source_map_1 = require("source-map");
const error_stack_parser_1 = require("error-stack-parser");
const mitmproxy_interceptor_1 = require("./mitmproxy_interceptor");
const url_1 = require("url");
const magicString = '//# sourceMappingURL=data:application/json;base64,';
/**
 * Converts stack frames to get the position in the original source document.
 * Strips any frames from the given agent string.
 */
class StackFrameConverter {
    constructor(_results) {
        this._results = _results;
        this._maps = new Map();
    }
    /**
     * Converts the raw stack frames from the BLeak-instrumented source code of the application to the
     * application's original source code.
     *
     * Stores relevant StackFrame / source file data into the `results` object, and returns the stack frames
     * in results format.
     * @param proxy
     * @param pageUrl
     * @param results
     * @param traces
     * @param agentUrl
     */
    static ConvertGrowthStacks(proxy, pageUrl, results, traces, agentUrl = mitmproxy_interceptor_1.DEFAULT_AGENT_URL) {
        return new StackFrameConverter(results).convertGrowthStacks(proxy, pageUrl, traces, agentUrl);
    }
    _fetchMap(proxy, url) {
        if (typeof (url) !== "string") {
            return;
        }
        let map = this._maps.get(url);
        if (!map) {
            try {
                const stashedItem = proxy.getFromStash(url);
                const source = stashedItem.data.toString();
                let sourceMapOffset = source.lastIndexOf(magicString);
                if (sourceMapOffset > -1) {
                    sourceMapOffset += magicString.length;
                    const sourceMapBase64 = source.slice(sourceMapOffset);
                    const sourceMapString = new Buffer(sourceMapBase64, 'base64').toString('utf8');
                    const sourceMap = JSON.parse(sourceMapString);
                    const consumer = new source_map_1.SourceMapConsumer(sourceMap);
                    this._maps.set(url, consumer);
                    if (sourceMap.sourcesContent && sourceMap.sourcesContent.length > 0) {
                        const len = sourceMap.sourcesContent.length;
                        for (let i = 0; i < len; i++) {
                            this._results.addSourceFile(url, stashedItem.isJavaScript ? "text/javascript" : "text/html", sourceMap.sourcesContent[i]);
                        }
                    }
                }
                else {
                    this._results.addSourceFile(url, stashedItem.isJavaScript ? "text/javascript" : "text/html", source);
                }
            }
            catch (e) {
                // Failed to get map.
                console.error(`Failed to get source map for ${url}:`);
                console.error(e);
            }
        }
    }
    convertGrowthStacks(proxy, pageUrl, traces, agentUrl) {
        // First pass: Get all unique URLs and their source maps.
        const urls = new Set();
        const rawStacks = new Map();
        function frameFilter(f) {
            return (!f.fileName || f.fileName.indexOf(agentUrl) === -1) && (!f.functionName || (f.functionName.indexOf("eval") === -1 && f.functionName.indexOf(agentUrl) === -1));
        }
        function processFrame(f) {
            if (f.fileName && !f.fileName.toLowerCase().startsWith("http")) {
                f.fileName = url_1.resolve(pageUrl, f.fileName);
            }
            urls.add(f.fileName);
        }
        function processStack(s) {
            if (!rawStacks.has(s)) {
                const frames = error_stack_parser_1.parse({ stack: s }).filter(frameFilter);
                frames.forEach(processFrame);
                rawStacks.set(s, frames);
            }
        }
        // Step 1: Collect all URLs.
        Object.keys(traces).forEach((stringId) => {
            const id = parseInt(stringId, 10);
            traces[id].forEach(processStack);
        });
        // Step 2: Get files, parse source maps.
        urls.forEach((url) => {
            this._fetchMap(proxy, url);
        });
        // Step 3: Convert stacks.
        const convertedStacks = new Map();
        rawStacks.forEach((stack, k) => {
            convertedStacks.set(k, this._convertStack(stack));
        });
        // Step 4: Map stacks back into the return object.
        function mapStack(s) {
            return convertedStacks.get(s);
        }
        const rv = {};
        Object.keys(traces).forEach((stringId) => {
            const id = parseInt(stringId, 10);
            rv[id] = traces[id].map(mapStack);
        });
        return rv;
    }
    _convertStack(stack) {
        return stack.map((frame) => this._convertStackFrame(frame));
    }
    _convertStackFrame(frame) {
        const map = this._maps.get(frame.fileName);
        if (!map) {
            return this._results.addStackFrameFromObject(frame);
        }
        const ogPos = map.originalPositionFor({
            line: frame.lineNumber,
            column: frame.columnNumber
        });
        frame.lineNumber = ogPos.line;
        frame.columnNumber = ogPos.column;
        return this._results.addStackFrameFromObject(frame);
    }
}
exports.default = StackFrameConverter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2tfZnJhbWVfY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zdGFja19mcmFtZV9jb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkQ7QUFDM0QsMkRBQXlFO0FBQ3pFLG1FQUEwRDtBQUMxRCw2QkFBMEM7QUFLMUMsTUFBTSxXQUFXLEdBQUcsb0RBQW9ELENBQUM7QUFFekU7OztHQUdHO0FBQ0g7SUFtQkUsWUFDVSxRQUFzQjtRQUF0QixhQUFRLEdBQVIsUUFBUSxDQUFjO1FBbkJ4QixVQUFLLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7SUFvQmxELENBQUM7SUFsQko7Ozs7Ozs7Ozs7O09BV0c7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBZ0IsRUFBRSxPQUFlLEVBQUUsT0FBcUIsRUFBRSxNQUEwQixFQUFFLFdBQW1CLHlDQUFpQjtRQUMxSixNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBTU8sU0FBUyxDQUFDLEtBQWdCLEVBQUUsR0FBVztRQUM3QyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUM7UUFDVCxDQUFDO1FBQ0QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDO2dCQUNILE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzVDLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxJ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LENBQUMsbUJBQW1CLENBQUM7WUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQ3RCLE1BQU0sRUFBRSxLQUFLLENBQUMsWUFBWTtTQUMzQixDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDOUIsS0FBSyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQTdIRCxzQ0E2SEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NvdXJjZU1hcENvbnN1bWVyLCBSYXdTb3VyY2VNYXB9IGZyb20gJ3NvdXJjZS1tYXAnO1xuaW1wb3J0IHtTdGFja0ZyYW1lLCBwYXJzZSBhcyBFcnJvclN0YWNrUGFyc2VyfSBmcm9tICdlcnJvci1zdGFjay1wYXJzZXInO1xuaW1wb3J0IHtERUZBVUxUX0FHRU5UX1VSTH0gZnJvbSAnLi9taXRtcHJveHlfaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtyZXNvbHZlIGFzIHJlc29sdmVVUkx9IGZyb20gJ3VybCc7XG5pbXBvcnQgQkxlYWtSZXN1bHRzIGZyb20gJy4vYmxlYWtfcmVzdWx0cyc7XG5pbXBvcnQge0lTdGFja30gZnJvbSAnLi4vY29tbW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IE1JVE1Qcm94eSBmcm9tICdtaXRtcHJveHknO1xuXG5jb25zdCBtYWdpY1N0cmluZyA9ICcvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCc7XG5cbi8qKlxuICogQ29udmVydHMgc3RhY2sgZnJhbWVzIHRvIGdldCB0aGUgcG9zaXRpb24gaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSBkb2N1bWVudC5cbiAqIFN0cmlwcyBhbnkgZnJhbWVzIGZyb20gdGhlIGdpdmVuIGFnZW50IHN0cmluZy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhY2tGcmFtZUNvbnZlcnRlciB7XG4gIHByaXZhdGUgX21hcHMgPSBuZXcgTWFwPHN0cmluZywgU291cmNlTWFwQ29uc3VtZXI+KCk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSByYXcgc3RhY2sgZnJhbWVzIGZyb20gdGhlIEJMZWFrLWluc3RydW1lbnRlZCBzb3VyY2UgY29kZSBvZiB0aGUgYXBwbGljYXRpb24gdG8gdGhlXG4gICAqIGFwcGxpY2F0aW9uJ3Mgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gICAqXG4gICAqIFN0b3JlcyByZWxldmFudCBTdGFja0ZyYW1lIC8gc291cmNlIGZpbGUgZGF0YSBpbnRvIHRoZSBgcmVzdWx0c2Agb2JqZWN0LCBhbmQgcmV0dXJucyB0aGUgc3RhY2sgZnJhbWVzXG4gICAqIGluIHJlc3VsdHMgZm9ybWF0LlxuICAgKiBAcGFyYW0gcHJveHlcbiAgICogQHBhcmFtIHBhZ2VVcmxcbiAgICogQHBhcmFtIHJlc3VsdHNcbiAgICogQHBhcmFtIHRyYWNlc1xuICAgKiBAcGFyYW0gYWdlbnRVcmxcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQ29udmVydEdyb3d0aFN0YWNrcyhwcm94eTogTUlUTVByb3h5LCBwYWdlVXJsOiBzdHJpbmcsIHJlc3VsdHM6IEJMZWFrUmVzdWx0cywgdHJhY2VzOiBHcm93aW5nU3RhY2tUcmFjZXMsIGFnZW50VXJsOiBzdHJpbmcgPSBERUZBVUxUX0FHRU5UX1VSTCk6IHtbaWQ6IG51bWJlcl06IElTdGFja1tdfSB7XG4gICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lQ29udmVydGVyKHJlc3VsdHMpLmNvbnZlcnRHcm93dGhTdGFja3MocHJveHksIHBhZ2VVcmwsIHRyYWNlcywgYWdlbnRVcmwpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfcmVzdWx0czogQkxlYWtSZXN1bHRzXG4gICkge31cblxuICBwcml2YXRlIF9mZXRjaE1hcChwcm94eTogTUlUTVByb3h5LCB1cmw6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YodXJsKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbWFwID0gdGhpcy5fbWFwcy5nZXQodXJsKTtcbiAgICBpZiAoIW1hcCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3Rhc2hlZEl0ZW0gPSBwcm94eS5nZXRGcm9tU3Rhc2godXJsKTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gc3Rhc2hlZEl0ZW0uZGF0YS50b1N0cmluZygpO1xuICAgICAgICBsZXQgc291cmNlTWFwT2Zmc2V0ID0gc291cmNlLmxhc3RJbmRleE9mKG1hZ2ljU3RyaW5nKVxuICAgICAgICBpZiAoc291cmNlTWFwT2Zmc2V0ID4gLTEpIHtcbiAgICAgICAgICBzb3VyY2VNYXBPZmZzZXQgKz0gbWFnaWNTdHJpbmcubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZU1hcEJhc2U2NCA9IHNvdXJjZS5zbGljZShzb3VyY2VNYXBPZmZzZXQpO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZU1hcFN0cmluZyA9IG5ldyBCdWZmZXIoc291cmNlTWFwQmFzZTY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICAgICAgICBjb25zdCBzb3VyY2VNYXA6IFJhd1NvdXJjZU1hcCA9IEpTT04ucGFyc2Uoc291cmNlTWFwU3RyaW5nKTtcbiAgICAgICAgICBjb25zdCBjb25zdW1lciA9IG5ldyBTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXApO1xuICAgICAgICAgIHRoaXMuX21hcHMuc2V0KHVybCwgY29uc3VtZXIpO1xuICAgICAgICAgIGlmIChzb3VyY2VNYXAuc291cmNlc0NvbnRlbnQgJiYgc291cmNlTWFwLnNvdXJjZXNDb250ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IHNvdXJjZU1hcC5zb3VyY2VzQ29udGVudC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jlc3VsdHMuYWRkU291cmNlRmlsZSh1cmwsIHN0YXNoZWRJdGVtLmlzSmF2YVNjcmlwdCA/IFwidGV4dC9qYXZhc2NyaXB0XCIgOiBcInRleHQvaHRtbFwiLCBzb3VyY2VNYXAuc291cmNlc0NvbnRlbnRbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9yZXN1bHRzLmFkZFNvdXJjZUZpbGUodXJsLCBzdGFzaGVkSXRlbS5pc0phdmFTY3JpcHQgPyBcInRleHQvamF2YXNjcmlwdFwiIDogXCJ0ZXh0L2h0bWxcIiwgc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBGYWlsZWQgdG8gZ2V0IG1hcC5cbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGdldCBzb3VyY2UgbWFwIGZvciAke3VybH06YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNvbnZlcnRHcm93dGhTdGFja3MocHJveHk6IE1JVE1Qcm94eSwgcGFnZVVybDogc3RyaW5nLCB0cmFjZXM6IEdyb3dpbmdTdGFja1RyYWNlcywgYWdlbnRVcmw6IHN0cmluZyk6IHtbaWQ6IG51bWJlcl06IElTdGFja1tdfSB7XG4gICAgLy8gRmlyc3QgcGFzczogR2V0IGFsbCB1bmlxdWUgVVJMcyBhbmQgdGhlaXIgc291cmNlIG1hcHMuXG4gICAgY29uc3QgdXJscyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgIGNvbnN0IHJhd1N0YWNrcyA9IG5ldyBNYXA8c3RyaW5nLCBTdGFja0ZyYW1lW10+KCk7XG5cbiAgICBmdW5jdGlvbiBmcmFtZUZpbHRlcihmOiBTdGFja0ZyYW1lKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gKCFmLmZpbGVOYW1lIHx8IGYuZmlsZU5hbWUuaW5kZXhPZihhZ2VudFVybCkgPT09IC0xKSAmJiAoIWYuZnVuY3Rpb25OYW1lIHx8IChmLmZ1bmN0aW9uTmFtZS5pbmRleE9mKFwiZXZhbFwiKSA9PT0gLTEgJiYgZi5mdW5jdGlvbk5hbWUuaW5kZXhPZihhZ2VudFVybCkgPT09IC0xKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0ZyYW1lKGY6IFN0YWNrRnJhbWUpIHtcbiAgICAgIGlmIChmLmZpbGVOYW1lICYmICFmLmZpbGVOYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgZi5maWxlTmFtZSA9IHJlc29sdmVVUkwocGFnZVVybCwgZi5maWxlTmFtZSk7XG4gICAgICB9XG4gICAgICB1cmxzLmFkZChmLmZpbGVOYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3RhY2soczogc3RyaW5nKTogdm9pZCB7XG4gICAgICBpZiAoIXJhd1N0YWNrcy5oYXMocykpIHtcbiAgICAgICAgY29uc3QgZnJhbWVzID0gRXJyb3JTdGFja1BhcnNlcig8YW55PiB7c3RhY2s6IHN9KS5maWx0ZXIoZnJhbWVGaWx0ZXIpO1xuICAgICAgICBmcmFtZXMuZm9yRWFjaChwcm9jZXNzRnJhbWUpO1xuICAgICAgICByYXdTdGFja3Muc2V0KHMsIGZyYW1lcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RlcCAxOiBDb2xsZWN0IGFsbCBVUkxzLlxuICAgIE9iamVjdC5rZXlzKHRyYWNlcykuZm9yRWFjaCgoc3RyaW5nSWQpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQoc3RyaW5nSWQsIDEwKTtcbiAgICAgIHRyYWNlc1tpZF0uZm9yRWFjaChwcm9jZXNzU3RhY2spO1xuICAgIH0pO1xuICAgIC8vIFN0ZXAgMjogR2V0IGZpbGVzLCBwYXJzZSBzb3VyY2UgbWFwcy5cbiAgICB1cmxzLmZvckVhY2goKHVybCkgPT4ge1xuICAgICAgdGhpcy5fZmV0Y2hNYXAocHJveHksIHVybCk7XG4gICAgfSk7XG4gICAgLy8gU3RlcCAzOiBDb252ZXJ0IHN0YWNrcy5cbiAgICBjb25zdCBjb252ZXJ0ZWRTdGFja3MgPSBuZXcgTWFwPHN0cmluZywgSVN0YWNrPigpO1xuICAgIHJhd1N0YWNrcy5mb3JFYWNoKChzdGFjaywgaykgPT4ge1xuICAgICAgY29udmVydGVkU3RhY2tzLnNldChrLCB0aGlzLl9jb252ZXJ0U3RhY2soc3RhY2spKTtcbiAgICB9KTtcbiAgICAvLyBTdGVwIDQ6IE1hcCBzdGFja3MgYmFjayBpbnRvIHRoZSByZXR1cm4gb2JqZWN0LlxuICAgIGZ1bmN0aW9uIG1hcFN0YWNrKHM6IHN0cmluZyk6IElTdGFjayB7XG4gICAgICByZXR1cm4gY29udmVydGVkU3RhY2tzLmdldChzKTtcbiAgICB9XG4gICAgY29uc3QgcnY6IHtbaWQ6IG51bWJlcl06IElTdGFja1tdfSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRyYWNlcykuZm9yRWFjaCgoc3RyaW5nSWQpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQoc3RyaW5nSWQsIDEwKTtcbiAgICAgIHJ2W2lkXSA9IHRyYWNlc1tpZF0ubWFwKG1hcFN0YWNrKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBydjtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbnZlcnRTdGFjayhzdGFjazogU3RhY2tGcmFtZVtdKTogSVN0YWNrIHtcbiAgICByZXR1cm4gc3RhY2subWFwKChmcmFtZSkgPT4gdGhpcy5fY29udmVydFN0YWNrRnJhbWUoZnJhbWUpKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbnZlcnRTdGFja0ZyYW1lKGZyYW1lOiBTdGFja0ZyYW1lKTogbnVtYmVyIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLl9tYXBzLmdldChmcmFtZS5maWxlTmFtZSk7XG4gICAgaWYgKCFtYXApIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRzLmFkZFN0YWNrRnJhbWVGcm9tT2JqZWN0KGZyYW1lKTtcbiAgICB9XG4gICAgY29uc3Qgb2dQb3MgPSBtYXAub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICBsaW5lOiBmcmFtZS5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uOiBmcmFtZS5jb2x1bW5OdW1iZXJcbiAgICB9KTtcbiAgICBmcmFtZS5saW5lTnVtYmVyID0gb2dQb3MubGluZTtcbiAgICBmcmFtZS5jb2x1bW5OdW1iZXIgPSBvZ1Bvcy5jb2x1bW47XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuYWRkU3RhY2tGcmFtZUZyb21PYmplY3QoZnJhbWUpO1xuICB9XG59Il19