"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const leak_root_1 = require("./leak_root");
function leakRootToJSON(l) {
    return l.toJSON();
}
function leakRootFromJSON(l) {
    return leak_root_1.default.FromJSON(l);
}
/**
 * Contains the results from a BLeak run.
 */
class BLeakResults {
    constructor(leaks = [], stackFrames = [], sourceFiles = {}, heapStats = [], rankingEvaluation = { leakShare: [], transitiveClosureSize: [], retainedSize: [] }) {
        this.leaks = leaks;
        this.stackFrames = stackFrames;
        this.sourceFiles = sourceFiles;
        this.heapStats = heapStats;
        this.rankingEvaluation = rankingEvaluation;
    }
    /**
     * Deserialize from a JSON object.
     * @param br
     */
    static FromJSON(br) {
        return new BLeakResults(br.leaks.map(leakRootFromJSON), br.stackFrames, br.sourceFiles, br.heapStats, br.rankingEvaluation);
    }
    /**
     * Add the given stack frame to the results, and returns a canonical ID.
     * @param sf
     */
    addStackFrame(url, line, col, functionName, source) {
        const sf = [url, line, col, functionName, source];
        return this.stackFrames.push(sf) - 1;
    }
    /**
     * Adds a given stack frame expressed as an object to the results, and returns a canonical ID.
     * @param sf
     */
    addStackFrameFromObject(sf) {
        return this.addStackFrame(sf.fileName, sf.lineNumber, sf.columnNumber, sf.functionName, sf.source);
    }
    /**
     * Adds the given source file to the results.
     * @param url
     * @param source
     */
    addSourceFile(url, mimeType, source) {
        this.sourceFiles[url] = {
            mimeType,
            source
        };
    }
    /**
     * Compacts the results into a new BLeakResults object.
     * - Deduplicates stack frames.
     * - Removes any source files for which there are no relevant stack frames.
     */
    compact() {
        const newSourceFiles = {};
        const oldSourceFiles = this.sourceFiles;
        const newStackFrames = [];
        const newLeaks = [];
        const oldLeaks = this.leaks;
        const sfMap = new Map();
        const oldStackFrames = this.stackFrames;
        function sfKey(sf) {
            return sf.join(";");
        }
        for (const sf of oldStackFrames) {
            const key = sfKey(sf);
            if (!sfMap.has(key)) {
                const id = newStackFrames.push(sf) - 1;
                sfMap.set(key, { id, sf });
                newSourceFiles[sf[0]] = oldSourceFiles[sf[0]];
            }
        }
        function sfLookup(oldSfId) {
            const sf = oldStackFrames[oldSfId];
            return sfMap.get(sfKey(sf)).id;
        }
        // This is kinda terrible, but we use a string representation
        // of stacks to compare them. There shouldn't be many dupes,
        // but sometimes there are after we normalize stack frames
        // (removing references to bleak agent).
        function stackToString(s) {
            return s.join(",");
        }
        for (const leak of oldLeaks) {
            const oldStacks = leak.stacks;
            const newStacks = [];
            const foundStacks = new Set();
            for (const oldStack of oldStacks) {
                const newStack = oldStack.map(sfLookup);
                const stackStr = stackToString(newStack);
                // Ignore duplicate stacks.
                if (!foundStacks.has(stackStr)) {
                    foundStacks.add(stackStr);
                    newStacks.push(newStack);
                }
            }
            newLeaks.push(new leak_root_1.default(leak.id, leak.paths, leak.scores, newStacks));
        }
        return new BLeakResults(newLeaks, newStackFrames, newSourceFiles, this.heapStats);
    }
    /**
     * Convert a stack object into a set of frames.
     * @param st
     */
    stackToFrames(st) {
        const stackFrames = this.stackFrames;
        function lookup(sfId) {
            return stackFrames[sfId];
        }
        return st.map(lookup);
    }
    /**
     * Serialize into a JSON object.
     */
    toJSON() {
        return {
            leaks: this.leaks.map(leakRootToJSON),
            stackFrames: this.stackFrames,
            sourceFiles: this.sourceFiles,
            heapStats: this.heapStats,
            rankingEvaluation: this.rankingEvaluation
        };
    }
}
exports.default = BLeakResults;
//# sourceMappingURL=data:application/json;base64,