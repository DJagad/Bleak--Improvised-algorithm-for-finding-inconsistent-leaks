"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_to_string_1 = require("./path_to_string");
/**
 * Converts a LeakRoot into a subsection of the report.
 * @param l
 * @param metric
 * @param rank
 */
function leakToString(results, l, metric, rank) {
    const paths = l.paths.map(path_to_string_1.default);
    return `## LeakRoot Ranked ${rank} [Score: ${l.scores[metric]}]

### GC Paths

* ${paths.join('\n* ')}

### Stack Traces Responsible

${l.stacks.map((stack, i) => {
        return `
${stack.filter((v, i) => i < 10).map((f, j) => {
            const frame = results.stackFrames[f];
            return `        [${j}] ${frame[3]} ${frame[0]}:${frame[1]}:${frame[2]}`;
        }).join("\n")}${stack.length > 10 ? `\n        (${stack.length - 10} more...)` : ``}
`;
    }).join("\n")}
`;
}
/**
 * Converts a specific sequence of LeakRoots into a section of the report.
 * @param results
 * @param leaksInOrder
 * @param metric
 */
function leaksToString(results, leaksInOrder, metric) {
    return leaksInOrder.map((l, i) => leakToString(results, l, metric, i + 1)).join("\n");
}
/**
 * Given a set of BLeak results, prints a human-readable text report.
 * @param results
 */
function TextReporter(results) {
    const leaks = results.leaks;
    if (leaks.length === 0) {
        return "No leaks found.";
    }
    const metrics = [["LeakShare", "leakShare"], ["Retained Size", "retainedSize"], ["Transitive Closure Size", "transitiveClosureSize"]];
    return metrics.map((m) => {
        return `# LeakRoots Ranked By ${m[0]}\n${leaksToString(results, results.leaks.sort((a, b) => b.scores[m[1]] - a.scores[m[1]]), m[1])}\n\n`;
    }).join("\n");
}
exports.default = TextReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dF9yZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdGV4dF9yZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUE0QztBQU01Qzs7Ozs7R0FLRztBQUNILHNCQUFzQixPQUFxQixFQUFFLENBQVcsRUFBRSxNQUFrQixFQUFFLElBQVk7SUFDeEYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsd0JBQVksQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxzQkFBc0IsSUFBSSxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDOzs7O0lBSTNELEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzs7O0VBSXBCLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLE1BQU0sQ0FBQztFQUNQLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO0NBQ2xGLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQ1osQ0FBQztBQUNGLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILHVCQUF1QixPQUFxQixFQUFFLFlBQXdCLEVBQUUsTUFBa0I7SUFDeEYsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxzQkFBcUMsT0FBcUI7SUFDeEQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFDRCxNQUFNLE9BQU8sR0FBMkIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUM5SixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzdJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixDQUFDO0FBVEQsK0JBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aFRvU3RyaW5nIGZyb20gJy4vcGF0aF90b19zdHJpbmcnO1xuaW1wb3J0IEJMZWFrUmVzdWx0cyBmcm9tICcuL2JsZWFrX3Jlc3VsdHMnO1xuaW1wb3J0IExlYWtSb290IGZyb20gJy4vbGVha19yb290JztcblxudHlwZSBNZXRyaWNUeXBlID0gXCJyZXRhaW5lZFNpemVcIiB8IFwibGVha1NoYXJlXCIgfCBcInRyYW5zaXRpdmVDbG9zdXJlU2l6ZVwiO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgTGVha1Jvb3QgaW50byBhIHN1YnNlY3Rpb24gb2YgdGhlIHJlcG9ydC5cbiAqIEBwYXJhbSBsXG4gKiBAcGFyYW0gbWV0cmljXG4gKiBAcGFyYW0gcmFua1xuICovXG5mdW5jdGlvbiBsZWFrVG9TdHJpbmcocmVzdWx0czogQkxlYWtSZXN1bHRzLCBsOiBMZWFrUm9vdCwgbWV0cmljOiBNZXRyaWNUeXBlLCByYW5rOiBudW1iZXIpOiBzdHJpbmcge1xuICBjb25zdCBwYXRocyA9IGwucGF0aHMubWFwKHBhdGhUb1N0cmluZyk7XG4gIHJldHVybiBgIyMgTGVha1Jvb3QgUmFua2VkICR7cmFua30gW1Njb3JlOiAke2wuc2NvcmVzW21ldHJpY119XVxuXG4jIyMgR0MgUGF0aHNcblxuKiAke3BhdGhzLmpvaW4oJ1xcbiogJyl9XG5cbiMjIyBTdGFjayBUcmFjZXMgUmVzcG9uc2libGVcblxuJHtsLnN0YWNrcy5tYXAoKHN0YWNrLCBpKSA9PiB7XG4gIHJldHVybiBgXG4ke3N0YWNrLmZpbHRlcigodiwgaSkgPT4gaSA8IDEwKS5tYXAoKGYsIGopID0+IHtcbiAgY29uc3QgZnJhbWUgPSByZXN1bHRzLnN0YWNrRnJhbWVzW2ZdO1xuICByZXR1cm4gYCAgICAgICAgWyR7an1dICR7ZnJhbWVbM119ICR7ZnJhbWVbMF19OiR7ZnJhbWVbMV19OiR7ZnJhbWVbMl19YDtcbn0pLmpvaW4oXCJcXG5cIil9JHtzdGFjay5sZW5ndGggPiAxMCA/IGBcXG4gICAgICAgICgke3N0YWNrLmxlbmd0aCAtIDEwfSBtb3JlLi4uKWAgOiBgYH1cbmA7XG59KS5qb2luKFwiXFxuXCIpfVxuYDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHNwZWNpZmljIHNlcXVlbmNlIG9mIExlYWtSb290cyBpbnRvIGEgc2VjdGlvbiBvZiB0aGUgcmVwb3J0LlxuICogQHBhcmFtIHJlc3VsdHNcbiAqIEBwYXJhbSBsZWFrc0luT3JkZXJcbiAqIEBwYXJhbSBtZXRyaWNcbiAqL1xuZnVuY3Rpb24gbGVha3NUb1N0cmluZyhyZXN1bHRzOiBCTGVha1Jlc3VsdHMsIGxlYWtzSW5PcmRlcjogTGVha1Jvb3RbXSwgbWV0cmljOiBNZXRyaWNUeXBlKTogc3RyaW5nIHtcbiAgcmV0dXJuIGxlYWtzSW5PcmRlci5tYXAoKGwsIGkpID0+IGxlYWtUb1N0cmluZyhyZXN1bHRzLCBsLCBtZXRyaWMsIGkgKyAxKSkuam9pbihcIlxcblwiKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIHNldCBvZiBCTGVhayByZXN1bHRzLCBwcmludHMgYSBodW1hbi1yZWFkYWJsZSB0ZXh0IHJlcG9ydC5cbiAqIEBwYXJhbSByZXN1bHRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRleHRSZXBvcnRlcihyZXN1bHRzOiBCTGVha1Jlc3VsdHMpOiBzdHJpbmcge1xuICBjb25zdCBsZWFrcyA9IHJlc3VsdHMubGVha3M7XG4gIGlmIChsZWFrcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gXCJObyBsZWFrcyBmb3VuZC5cIjtcbiAgfVxuICBjb25zdCBtZXRyaWNzOiBbc3RyaW5nLCBNZXRyaWNUeXBlXVtdID0gW1tcIkxlYWtTaGFyZVwiLCBcImxlYWtTaGFyZVwiXSwgW1wiUmV0YWluZWQgU2l6ZVwiLCBcInJldGFpbmVkU2l6ZVwiXSwgW1wiVHJhbnNpdGl2ZSBDbG9zdXJlIFNpemVcIiwgXCJ0cmFuc2l0aXZlQ2xvc3VyZVNpemVcIl1dO1xuICByZXR1cm4gbWV0cmljcy5tYXAoKG0pID0+IHtcbiAgICByZXR1cm4gYCMgTGVha1Jvb3RzIFJhbmtlZCBCeSAke21bMF19XFxuJHtsZWFrc1RvU3RyaW5nKHJlc3VsdHMsIHJlc3VsdHMubGVha3Muc29ydCgoYSwgYikgPT4gYi5zY29yZXNbbVsxXV0gLSBhLnNjb3Jlc1ttWzFdXSksIG1bMV0pfVxcblxcbmA7XG4gIH0pLmpvaW4oXCJcXG5cIik7XG59Il19