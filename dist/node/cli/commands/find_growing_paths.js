"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const growth_graph_1 = require("../../lib/growth_graph");
const path_to_string_1 = require("../../lib/path_to_string");
const fs_1 = require("fs");
const readline = require("readline");
const interfaces_1 = require("../../common/interfaces");
const util_1 = require("../../common/util");
const heap_snapshot_parser_1 = require("../../lib/heap_snapshot_parser");
const zlib_1 = require("zlib");
function getHeapSnapshotParser(file) {
    const parser = new heap_snapshot_parser_1.default();
    const stream = fs_1.createReadStream(file).pipe(zlib_1.createGunzip());
    stream.on('data', function (d) {
        parser.addSnapshotChunk(d.toString());
    });
    return parser;
}
async function main(files) {
    const t = new growth_graph_1.HeapGrowthTracker();
    for (const file of files) {
        console.log(`Processing ${file}...`);
        await t.addSnapshot(getHeapSnapshotParser(file));
    }
    const growth = util_1.time('Get Growing Objects', console, () => t.findLeakPaths());
    console.log(`Found ${growth.length} growing paths.`);
    console.log(``);
    console.log(`Report`);
    console.log(`======`);
    console.log(``);
    growth.sort((a, b) => b.scores.leakShare - a.scores.leakShare).forEach((obj) => {
        console.log(`* LeakShare: ${obj.scores.leakShare}, Retained Size: ${obj.scores.retainedSize}, Transitive Closure Size: ${obj.scores.transitiveClosureSize}`);
        obj.paths.slice(0, 5).forEach((p, i) => {
            console.log(`   * ${path_to_string_1.default(p)}`);
        });
        if (obj.paths.length > 5) {
            console.log(`   * (${obj.paths.length - 5} more...)`);
        }
    });
    console.log(`Exploring the heap!`);
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    let heap = t.getGraph();
    let node = heap.getRoot();
    let path = [node];
    let hide = true;
    const MAX_COL_SIZE = 25;
    function pad(str, len) {
        let str2 = str.replace(/\n/g, ' ').slice(0, len);
        for (let i = str.length; i < len; i++) {
            str2 += " ";
        }
        return str2;
    }
    function column(strs, lens) {
        let out = "";
        for (let i = 0; i < strs.length; i++) {
            out += pad(strs[i], lens[i]) + " ";
        }
        return out;
    }
    function runRound(filter) {
        console.log(`Current Node: ${node.name} [${interfaces_1.SnapshotNodeTypeToString(node.type)}]`);
        console.log(`[..] Previous node, [h] ${hide ? "unhide system properties" : "hide system properties"}, [f (string)] Filter, [q] Quit`);
        let choices = [];
        let sizes = [0, 0, 0, 0, 0];
        let i = -1;
        for (const it = node.children; it.hasNext(); it.next()) {
            i++;
            const child = it.item();
            const to = child.to;
            // Skip some types of children.
            if (hide) {
                switch (to.type) {
                    //case SnapshotNodeType.Code:
                    case 10 /* ConsString */:
                    case 7 /* HeapNumber */:
                    case 0 /* Hidden */:
                    case 6 /* RegExp */:
                    case 11 /* SlicedString */:
                    case 2 /* String */:
                        continue;
                }
            }
            if (!filter || `${child.indexOrName}`.toLowerCase().indexOf(filter) !== -1) {
                let choice = [`[${i}]`, `${child.indexOrName}`, `=[${interfaces_1.SnapshotEdgeTypeToString(child.snapshotType)}]=>`, to.name, `[${interfaces_1.SnapshotNodeTypeToString(to.type)}]${t.isGrowing(to.nodeIndex) ? "*" : ""}`, `[Count: ${to.numProperties()}]`, `[Non-leak-reachable? ${t._nonLeakVisits.get(to.nodeIndex)}, Leak visits: ${t._leakRefs[to.nodeIndex]}, NI: ${to.nodeIndex}]`];
                choices.push(choice);
                for (let j = 0; j < choice.length; j++) {
                    if (choice[j].length > sizes[j]) {
                        sizes[j] = choice[j].length;
                        if (sizes[j] > MAX_COL_SIZE) {
                            sizes[j] = MAX_COL_SIZE;
                        }
                    }
                }
            }
        }
        for (const choice of choices) {
            console.log(column(choice, sizes));
        }
        rl.question("? ", (a) => {
            const a2 = a.trim().toLowerCase();
            let filter = undefined;
            switch (a2[0]) {
                case '.':
                    if (a2[1] === '.') {
                        path.pop();
                    }
                    break;
                case 'q':
                    rl.close();
                    process.exit();
                    break;
                case 'h':
                    hide = !hide;
                    break;
                case 'f': {
                    filter = a2.slice(2).trim();
                    break;
                }
                case 's': {
                    const latest = path[path.length - 1];
                    latest.nodeIndex = parseInt(a2.slice(2).trim(), 10);
                    path = [heap.getRoot(), latest];
                    break;
                }
                default:
                    const choice = parseInt(a2, 10);
                    const child = node.getChild(choice);
                    if (!child) {
                        console.log(`Invalid choice: ${choice}.`);
                    }
                    else {
                        path.push(child.to);
                    }
                    break;
            }
            if (path.length === 0) {
                path.push(heap.getRoot());
            }
            node = path[path.length - 1];
            runRound(filter);
        });
    }
    runRound();
}
const FindGrowingPaths = {
    command: 'find-growing-paths [snapshots...]',
    describe: 'Locates growing paths in a set of heap snapshots on disk. Useful for debugging BLeak.',
    handler: (args) => {
        if (args.snapshots.length === 0) {
            console.log(`No heap snapshots specified; nothing to do.`);
            return;
        }
        main(args.snapshots);
    },
    builder: (argv) => {
        return argv.positional('snapshots', {
            describe: 'Paths to heap snapshots (Gzipped) on disk, and in-order',
            type: 'string'
        });
    }
};
exports.default = FindGrowingPaths;
//# sourceMappingURL=data:application/json;base64,