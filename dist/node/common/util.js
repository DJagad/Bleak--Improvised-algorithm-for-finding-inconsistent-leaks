"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function time(n, log, action) {
    const start = Date.now();
    const rv = action();
    const end = Date.now();
    const str = `Time to run ${n}: ${(end - start) / 1000} seconds.`;
    log.log(str);
    return rv;
}
exports.time = time;
function wait(ms) {
    return new Promise((res) => {
        setTimeout(res, ms);
    });
}
exports.wait = wait;
class OneBitArray {
    constructor(length) {
        this._bits = new Uint8Array(Math.ceil(length / 8));
    }
    set(i, v) {
        const index = i >> 3;
        const offset = i - (index << 3);
        const mask = (1 << offset);
        // Clear bit
        this._bits[index] &= ~mask;
        if (v) {
            // Set bit
            this._bits[index] |= mask;
        }
    }
    get(i) {
        const index = i >> 3;
        const offset = i - (index << 3);
        return (this._bits[index] & (1 << offset)) !== 0;
    }
}
exports.OneBitArray = OneBitArray;
class TwoBitArray {
    constructor(length) {
        this._bits = new Uint8Array(Math.ceil(length / 4));
    }
    fill(v) {
        const vMasked = v & 0x3;
        const vQuad = (vMasked << 6) | (vMasked << 4) | (vMasked << 2) | vMasked;
        this._bits.fill(vQuad);
    }
    set(i, v) {
        const index = i >> 2;
        const offset = (i - (index << 2)) << 1;
        const mask = 0x3 << offset;
        // Clear area
        this._bits[index] &= ~mask;
        // Set area
        this._bits[index] |= (v & 0x3) << offset;
    }
    get(i) {
        const index = i >> 2;
        const offset = (i - (index << 2)) << 1;
        const mask = 0x3 << offset;
        return (this._bits[index] & mask) >> offset;
    }
}
exports.TwoBitArray = TwoBitArray;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLGNBQXdCLENBQVMsRUFBRSxHQUFRLEVBQUUsTUFBZTtJQUMxRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsTUFBTSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFDcEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDO0lBQ2pFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDYixNQUFNLENBQUMsRUFBRSxDQUFDO0FBQ1osQ0FBQztBQVBELG9CQU9DO0FBRUQsY0FBcUIsRUFBVTtJQUM3QixNQUFNLENBQUMsSUFBSSxPQUFPLENBQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUMvQixVQUFVLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUpELG9CQUlDO0FBRUQ7SUFFRSxZQUFZLE1BQWM7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVU7UUFDOUIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUM7UUFDM0IsWUFBWTtRQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNOLFVBQVU7WUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQztRQUM1QixDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBQyxDQUFTO1FBQ2xCLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQztDQUNGO0FBdkJELGtDQXVCQztBQUVEO0lBRUUsWUFBWSxNQUFjO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sSUFBSSxDQUFDLENBQVM7UUFDbkIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QixNQUFNLEtBQUssR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDekUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUM3QixNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUM7UUFDM0IsYUFBYTtRQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsV0FBVztRQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDO0lBQzNDLENBQUM7SUFFTSxHQUFHLENBQUMsQ0FBUztRQUNsQixNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUM7UUFDM0IsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUM7SUFDOUMsQ0FBQztDQUNGO0FBNUJELGtDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9nfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZTxUPihuOiBzdHJpbmcsIGxvZzogTG9nLCBhY3Rpb246ICgpID0+IFQpOiBUIHtcbiAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICBjb25zdCBydiA9IGFjdGlvbigpO1xuICBjb25zdCBlbmQgPSBEYXRlLm5vdygpO1xuICBjb25zdCBzdHIgPSBgVGltZSB0byBydW4gJHtufTogJHsoZW5kIC0gc3RhcnQpIC8gMTAwMH0gc2Vjb25kcy5gO1xuICBsb2cubG9nKHN0cik7XG4gIHJldHVybiBydjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhaXQobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlcykgPT4ge1xuICAgIHNldFRpbWVvdXQocmVzLCBtcyk7XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgT25lQml0QXJyYXkge1xuICBwcml2YXRlIF9iaXRzOiBVaW50OEFycmF5O1xuICBjb25zdHJ1Y3RvcihsZW5ndGg6IG51bWJlcikge1xuICAgIHRoaXMuX2JpdHMgPSBuZXcgVWludDhBcnJheShNYXRoLmNlaWwobGVuZ3RoIC8gOCkpO1xuICB9XG5cbiAgcHVibGljIHNldChpOiBudW1iZXIsIHY6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBpbmRleCA9IGkgPj4gMztcbiAgICBjb25zdCBvZmZzZXQgPSBpIC0gKGluZGV4IDw8IDMpO1xuICAgIGNvbnN0IG1hc2sgPSAoMSA8PCBvZmZzZXQpO1xuICAgIC8vIENsZWFyIGJpdFxuICAgIHRoaXMuX2JpdHNbaW5kZXhdICY9IH5tYXNrO1xuICAgIGlmICh2KSB7XG4gICAgICAvLyBTZXQgYml0XG4gICAgICB0aGlzLl9iaXRzW2luZGV4XSB8PSBtYXNrO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQoaTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaW5kZXggPSBpID4+IDM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gaSAtIChpbmRleCA8PCAzKTtcbiAgICByZXR1cm4gKHRoaXMuX2JpdHNbaW5kZXhdICYgKDEgPDwgb2Zmc2V0KSkgIT09IDA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFR3b0JpdEFycmF5IHtcbiAgcHJpdmF0ZSBfYml0czogVWludDhBcnJheTtcbiAgY29uc3RydWN0b3IobGVuZ3RoOiBudW1iZXIpIHtcbiAgICB0aGlzLl9iaXRzID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKGxlbmd0aCAvIDQpKTtcbiAgfVxuXG4gIHB1YmxpYyBmaWxsKHY6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHZNYXNrZWQgPSB2ICYgMHgzO1xuICAgIGNvbnN0IHZRdWFkID0gKHZNYXNrZWQgPDwgNikgfCAodk1hc2tlZCA8PCA0KSB8ICh2TWFza2VkIDw8IDIpIHwgdk1hc2tlZDtcbiAgICB0aGlzLl9iaXRzLmZpbGwodlF1YWQpO1xuICB9XG5cbiAgcHVibGljIHNldChpOiBudW1iZXIsIHY6IG51bWJlcikge1xuICAgIGNvbnN0IGluZGV4ID0gaSA+PiAyO1xuICAgIGNvbnN0IG9mZnNldCA9IChpIC0gKGluZGV4IDw8IDIpKSA8PCAxO1xuICAgIGNvbnN0IG1hc2sgPSAweDMgPDwgb2Zmc2V0O1xuICAgIC8vIENsZWFyIGFyZWFcbiAgICB0aGlzLl9iaXRzW2luZGV4XSAmPSB+bWFzaztcbiAgICAvLyBTZXQgYXJlYVxuICAgIHRoaXMuX2JpdHNbaW5kZXhdIHw9ICh2ICYgMHgzKSA8PCBvZmZzZXQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0KGk6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgaW5kZXggPSBpID4+IDI7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKGkgLSAoaW5kZXggPDwgMikpIDw8IDE7XG4gICAgY29uc3QgbWFzayA9IDB4MyA8PCBvZmZzZXQ7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRzW2luZGV4XSAmIG1hc2spID4+IG9mZnNldDtcbiAgfVxufVxuIl19